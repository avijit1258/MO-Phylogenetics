//  PhylogeneticMutation.h
//
//  Author:
//       Cristian G. Zambrano Vega <cristian_uteq@hotmail.com>
//
//  Copyright (c) 2011 Antonio J. Nebro, Juan J. Durillo
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef PhylogeneticMutation_H_
#define PhylogeneticMutation_H_

#include <Mutation.h>
#include <Solution.h>
#include <math.h>

#include <PseudoRandom.h>
#include <PhyloTree.h>
#include <Phylogeny.h>

#include <DominanceComparator.h>
        
#include <Bpp/Phyl/Io/Newick.h>
#include <Bpp/Phyl/Node.h>
#include <Bpp/Phyl/TreeTemplate.h>
#include <Bpp/Phyl/TreeTemplateTools.h>

#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>

#include <Bpp/Numeric/ParameterList.h>
#include <Bpp/Phyl/Likelihood/PseudoNewtonOptimizer.h>
#include <Bpp/Numeric/Function/BfgsMultiDimensions.h>
#include <Bpp/Numeric/Function/ThreePointsNumericalDerivative.h>
#include <Bpp/Numeric/Function/ConjugateGradientMultiDimensions.h>
#include <Bpp/Numeric/Function/TwoPointsNumericalDerivative.h>

#include <Bpp/Phyl/Likelihood/NNIHomogeneousTreeLikelihood.h>
#include <Bpp/Numeric/Function/MetaOptimizer.h>
#include <Bpp/Phyl/OptimizationTools.h>


           
using namespace bpp;

/**
  * @class Mutation
  * @brief This class implements a SPR mutation operator.
**/
class PhylogeneticMutation : public Mutation {

public:

   PhylogeneticMutation(map<string, void *> parameters);
  ~PhylogeneticMutation();
  void * execute(void *);

  double OptimizarRamasyParamModeloSust(Solution * solution);
  double OptimizarParamModeloSust(Solution * solution);
  double OptimizarRamas(TreeTemplate<Node> * &tree, PhyloTree* Pt, Phylogeny * p, double NumEvals , double Tolerancia);
  
  double OptimizarRamas(Solution * solution);
      
  inline void setNumIteraciones(double v){ NumIteraciones=v;  }
  
  void printParameters();
  
  bool OptRamas;
  string MetodoOptRamas;
  int NumIterOptRamas;
  double TolerenciaOptRamas;
  
  bool OptimizacionSubstModel;
  string MetodoOptimizacionSubstModel;
  int NumIterOptSubstModel;
  double TolerenciaOptSubstModel;
          
  bool OptimizacionRateDist;
  string MetodoOptRateDistB;
  
  //PPN
  int NumIteraciones;
  
private:
    
  string Metodo;
  double mutationProbability_;
  double distributionIndex_;

  double randomgsl_alpha;  // shape paramter of gamma distribution
  gsl_rng *random_gsl; // GSL (GNU Scientific Library) random generator for gamma numbers)

  
  DominanceComparator *comparator;
  
  void * doMutation(double mutationProbability_, Solution * solution);
  
  int SALS(Solution * solution);
  void PPNOptimiz(Solution * solution);
  bool isMov(vector< pair<int , int > > vIDS, int IDN1, int IDN2);
  
  
  void NNIMoves(Solution * solution);
  void NNIMovesLS(Solution * solution);
  void NNIMovesLS2(Solution * solution);
  
  pair< pair<Node*, Node*>  , pair<int, int> > NNI(Node * Nodo);
  pair< pair<Node*, Node*>  , pair<int, int> > NNI(Node * NodoSel, pair<int, int> pos);
  void NNIReverse(Node * NodoA, Node * NodeB);
  bool NNIValidate(Node * Nodo);
  bool NNIValidateBioPP(Node * Nodo);
  
  void NNIandBranchMutate(Solution * solution);
  
  void PPN_LS(Solution * solution);
  void PPN_LS2(Solution * solution);
  void PPN_LS3(Solution * solution);
  void PPN_LS4(Solution * solution);
  void PPN_LS5(Solution * solution);
  void PPN_LS6(Solution * solution);
  void PPN_LSPar(Solution * solution);
  
  void SPRPhyloMOEA(Solution * solution);
  void TBR(Solution * solution);
  pair< pair<double *, int *>, Node *> SPR(Node * Nodo1, Node * Nodo2, int &NextIDNode);
  void SPR(Node * Nodo1, Node * Nodo2, double * b);
  //void ChangeBranchLenghth(Node * Nodo, double length, NNIHomogeneousTreeLikelihood * &NNILik  );
  int SPRvalide (Node* N1, Node* N2);
  void SPRreverse(Node * Nodo1, Node * Nodo2, double * b, int &NextIDNode);
  int getNivel(Node* nodo);
  string getBrachNameProperty(int idnode,vector<Node*> nodos);

  
  void ModificarRamasDistGamma(Solution * solution);
  double *  OptimizarRamasAfterSRP(TreeTemplate<Node> *tree, PhyloTree* Pt, vector<string> Ramas, Phylogeny * p, int NumEvals , double Tolerancia);
  
   
  ofstream ComportamientoML,ComportamientoTime;
  
  // TODO: VALID_TYPES;

}; // PhylogeneticMutation

#endif /* PhylogeneticMutation */
