# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.






pkgdatadir = $(datadir)/libpll
pkglibdir = $(libdir)/libpll
pkglibexecdir = $(libexecdir)/libpll
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
am__append_1 = libpll-sse3.la
am__append_2 = libpll-sse3.a
am__append_3 = libpll-avx.la
am__append_4 = libpll-avx.a
am__append_5 = libpll-sse3-pthreads.la
am__append_6 = libpll-sse3-pthreads.a
am__append_7 = libpll-avx-pthreads.la
am__append_8 = libpll-avx-pthreads.a
subdir = src
DIST_COMMON = $(pkginclude_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_check_compile_flag.m4 \
	$(top_srcdir)/m4/ax_ext.m4 \
	$(top_srcdir)/m4/ax_gcc_x86_cpuid.m4 \
	$(top_srcdir)/m4/ax_mpi.m4 $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(libdir)" \
	"$(DESTDIR)$(pkgincludedir)"
LIBRARIES = $(lib_LIBRARIES)
ARFLAGS = cru
libpll_avx_pthreads_a_AR = $(AR) $(ARFLAGS)
libpll_avx_pthreads_a_LIBADD =
am__libpll_avx_pthreads_a_SOURCES_DIST = avxLikelihood.c \
	genericParallelization.c hash.c stack.c ssort.c queue.c \
	utils.c randomTree.c optimizeModel.c trash.c searchAlgo.c \
	topologies.c fastDNAparsimony.c treeIO.c models.c \
	evaluatePartialGenericSpecial.c evaluateGenericSpecial.c \
	newviewGenericSpecial.c makenewzGenericSpecial.c \
	bipartitionList.c restartHashTable.c recom.c lexer.c \
	alignment.c newick.c parsePartition.c parsimony.c
am__objects_1 = libpll_avx_pthreads_a-hash.$(OBJEXT) \
	libpll_avx_pthreads_a-stack.$(OBJEXT) \
	libpll_avx_pthreads_a-ssort.$(OBJEXT) \
	libpll_avx_pthreads_a-queue.$(OBJEXT) \
	libpll_avx_pthreads_a-utils.$(OBJEXT) \
	libpll_avx_pthreads_a-randomTree.$(OBJEXT) \
	libpll_avx_pthreads_a-optimizeModel.$(OBJEXT) \
	libpll_avx_pthreads_a-trash.$(OBJEXT) \
	libpll_avx_pthreads_a-searchAlgo.$(OBJEXT) \
	libpll_avx_pthreads_a-topologies.$(OBJEXT) \
	libpll_avx_pthreads_a-fastDNAparsimony.$(OBJEXT) \
	libpll_avx_pthreads_a-treeIO.$(OBJEXT) \
	libpll_avx_pthreads_a-models.$(OBJEXT) \
	libpll_avx_pthreads_a-evaluatePartialGenericSpecial.$(OBJEXT) \
	libpll_avx_pthreads_a-evaluateGenericSpecial.$(OBJEXT) \
	libpll_avx_pthreads_a-newviewGenericSpecial.$(OBJEXT) \
	libpll_avx_pthreads_a-makenewzGenericSpecial.$(OBJEXT) \
	libpll_avx_pthreads_a-bipartitionList.$(OBJEXT) \
	libpll_avx_pthreads_a-restartHashTable.$(OBJEXT) \
	libpll_avx_pthreads_a-recom.$(OBJEXT) \
	libpll_avx_pthreads_a-lexer.$(OBJEXT) \
	libpll_avx_pthreads_a-alignment.$(OBJEXT) \
	libpll_avx_pthreads_a-newick.$(OBJEXT) \
	libpll_avx_pthreads_a-parsePartition.$(OBJEXT) \
	libpll_avx_pthreads_a-parsimony.$(OBJEXT)
am__objects_2 = libpll_avx_pthreads_a-avxLikelihood.$(OBJEXT) \
	libpll_avx_pthreads_a-genericParallelization.$(OBJEXT) \
	$(am__objects_1)
am_libpll_avx_pthreads_a_OBJECTS =  \
	$(am__objects_2)
libpll_avx_pthreads_a_OBJECTS = $(am_libpll_avx_pthreads_a_OBJECTS)
libpll_avx_a_AR = $(AR) $(ARFLAGS)
libpll_avx_a_LIBADD =
am__libpll_avx_a_SOURCES_DIST = avxLikelihood.c hash.c stack.c ssort.c \
	queue.c utils.c randomTree.c optimizeModel.c trash.c \
	searchAlgo.c topologies.c fastDNAparsimony.c treeIO.c models.c \
	evaluatePartialGenericSpecial.c evaluateGenericSpecial.c \
	newviewGenericSpecial.c makenewzGenericSpecial.c \
	bipartitionList.c restartHashTable.c recom.c lexer.c \
	alignment.c newick.c parsePartition.c parsimony.c
am__objects_3 = libpll_avx_a-hash.$(OBJEXT) \
	libpll_avx_a-stack.$(OBJEXT) libpll_avx_a-ssort.$(OBJEXT) \
	libpll_avx_a-queue.$(OBJEXT) libpll_avx_a-utils.$(OBJEXT) \
	libpll_avx_a-randomTree.$(OBJEXT) \
	libpll_avx_a-optimizeModel.$(OBJEXT) \
	libpll_avx_a-trash.$(OBJEXT) libpll_avx_a-searchAlgo.$(OBJEXT) \
	libpll_avx_a-topologies.$(OBJEXT) \
	libpll_avx_a-fastDNAparsimony.$(OBJEXT) \
	libpll_avx_a-treeIO.$(OBJEXT) libpll_avx_a-models.$(OBJEXT) \
	libpll_avx_a-evaluatePartialGenericSpecial.$(OBJEXT) \
	libpll_avx_a-evaluateGenericSpecial.$(OBJEXT) \
	libpll_avx_a-newviewGenericSpecial.$(OBJEXT) \
	libpll_avx_a-makenewzGenericSpecial.$(OBJEXT) \
	libpll_avx_a-bipartitionList.$(OBJEXT) \
	libpll_avx_a-restartHashTable.$(OBJEXT) \
	libpll_avx_a-recom.$(OBJEXT) libpll_avx_a-lexer.$(OBJEXT) \
	libpll_avx_a-alignment.$(OBJEXT) libpll_avx_a-newick.$(OBJEXT) \
	libpll_avx_a-parsePartition.$(OBJEXT) \
	libpll_avx_a-parsimony.$(OBJEXT)
am__objects_4 = libpll_avx_a-avxLikelihood.$(OBJEXT) \
	$(am__objects_3)
am_libpll_avx_a_OBJECTS = $(am__objects_4)
libpll_avx_a_OBJECTS = $(am_libpll_avx_a_OBJECTS)
libpll_sse3_pthreads_a_AR = $(AR) $(ARFLAGS)
libpll_sse3_pthreads_a_LIBADD =
am__libpll_sse3_pthreads_a_SOURCES_DIST = genericParallelization.c \
	hash.c stack.c ssort.c queue.c utils.c randomTree.c \
	optimizeModel.c trash.c searchAlgo.c topologies.c \
	fastDNAparsimony.c treeIO.c models.c \
	evaluatePartialGenericSpecial.c evaluateGenericSpecial.c \
	newviewGenericSpecial.c makenewzGenericSpecial.c \
	bipartitionList.c restartHashTable.c recom.c lexer.c \
	alignment.c newick.c parsePartition.c parsimony.c
am__objects_5 = libpll_sse3_pthreads_a-hash.$(OBJEXT) \
	libpll_sse3_pthreads_a-stack.$(OBJEXT) \
	libpll_sse3_pthreads_a-ssort.$(OBJEXT) \
	libpll_sse3_pthreads_a-queue.$(OBJEXT) \
	libpll_sse3_pthreads_a-utils.$(OBJEXT) \
	libpll_sse3_pthreads_a-randomTree.$(OBJEXT) \
	libpll_sse3_pthreads_a-optimizeModel.$(OBJEXT) \
	libpll_sse3_pthreads_a-trash.$(OBJEXT) \
	libpll_sse3_pthreads_a-searchAlgo.$(OBJEXT) \
	libpll_sse3_pthreads_a-topologies.$(OBJEXT) \
	libpll_sse3_pthreads_a-fastDNAparsimony.$(OBJEXT) \
	libpll_sse3_pthreads_a-treeIO.$(OBJEXT) \
	libpll_sse3_pthreads_a-models.$(OBJEXT) \
	libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.$(OBJEXT) \
	libpll_sse3_pthreads_a-evaluateGenericSpecial.$(OBJEXT) \
	libpll_sse3_pthreads_a-newviewGenericSpecial.$(OBJEXT) \
	libpll_sse3_pthreads_a-makenewzGenericSpecial.$(OBJEXT) \
	libpll_sse3_pthreads_a-bipartitionList.$(OBJEXT) \
	libpll_sse3_pthreads_a-restartHashTable.$(OBJEXT) \
	libpll_sse3_pthreads_a-recom.$(OBJEXT) \
	libpll_sse3_pthreads_a-lexer.$(OBJEXT) \
	libpll_sse3_pthreads_a-alignment.$(OBJEXT) \
	libpll_sse3_pthreads_a-newick.$(OBJEXT) \
	libpll_sse3_pthreads_a-parsePartition.$(OBJEXT) \
	libpll_sse3_pthreads_a-parsimony.$(OBJEXT)
am__objects_6 = libpll_sse3_pthreads_a-genericParallelization.$(OBJEXT) \
	$(am__objects_5)
am_libpll_sse3_pthreads_a_OBJECTS =  \
	$(am__objects_6)
libpll_sse3_pthreads_a_OBJECTS = $(am_libpll_sse3_pthreads_a_OBJECTS)
libpll_sse3_a_AR = $(AR) $(ARFLAGS)
libpll_sse3_a_LIBADD =
am__libpll_sse3_a_SOURCES_DIST = hash.c stack.c ssort.c queue.c \
	utils.c randomTree.c optimizeModel.c trash.c searchAlgo.c \
	topologies.c fastDNAparsimony.c treeIO.c models.c \
	evaluatePartialGenericSpecial.c evaluateGenericSpecial.c \
	newviewGenericSpecial.c makenewzGenericSpecial.c \
	bipartitionList.c restartHashTable.c recom.c lexer.c \
	alignment.c newick.c parsePartition.c parsimony.c
am__objects_7 = libpll_sse3_a-hash.$(OBJEXT) \
	libpll_sse3_a-stack.$(OBJEXT) libpll_sse3_a-ssort.$(OBJEXT) \
	libpll_sse3_a-queue.$(OBJEXT) libpll_sse3_a-utils.$(OBJEXT) \
	libpll_sse3_a-randomTree.$(OBJEXT) \
	libpll_sse3_a-optimizeModel.$(OBJEXT) \
	libpll_sse3_a-trash.$(OBJEXT) \
	libpll_sse3_a-searchAlgo.$(OBJEXT) \
	libpll_sse3_a-topologies.$(OBJEXT) \
	libpll_sse3_a-fastDNAparsimony.$(OBJEXT) \
	libpll_sse3_a-treeIO.$(OBJEXT) libpll_sse3_a-models.$(OBJEXT) \
	libpll_sse3_a-evaluatePartialGenericSpecial.$(OBJEXT) \
	libpll_sse3_a-evaluateGenericSpecial.$(OBJEXT) \
	libpll_sse3_a-newviewGenericSpecial.$(OBJEXT) \
	libpll_sse3_a-makenewzGenericSpecial.$(OBJEXT) \
	libpll_sse3_a-bipartitionList.$(OBJEXT) \
	libpll_sse3_a-restartHashTable.$(OBJEXT) \
	libpll_sse3_a-recom.$(OBJEXT) libpll_sse3_a-lexer.$(OBJEXT) \
	libpll_sse3_a-alignment.$(OBJEXT) \
	libpll_sse3_a-newick.$(OBJEXT) \
	libpll_sse3_a-parsePartition.$(OBJEXT) \
	libpll_sse3_a-parsimony.$(OBJEXT)
am__objects_8 = $(am__objects_7)
am_libpll_sse3_a_OBJECTS = $(am__objects_8)
libpll_sse3_a_OBJECTS = $(am_libpll_sse3_a_OBJECTS)
LTLIBRARIES = $(lib_LTLIBRARIES)
libpll_avx_pthreads_la_LIBADD =
am__libpll_avx_pthreads_la_SOURCES_DIST = avxLikelihood.c \
	genericParallelization.c hash.c stack.c ssort.c queue.c \
	utils.c randomTree.c optimizeModel.c trash.c searchAlgo.c \
	topologies.c fastDNAparsimony.c treeIO.c models.c \
	evaluatePartialGenericSpecial.c evaluateGenericSpecial.c \
	newviewGenericSpecial.c makenewzGenericSpecial.c \
	bipartitionList.c restartHashTable.c recom.c lexer.c \
	alignment.c newick.c parsePartition.c parsimony.c
am__objects_9 = libpll_avx_pthreads_la-hash.lo \
	libpll_avx_pthreads_la-stack.lo \
	libpll_avx_pthreads_la-ssort.lo \
	libpll_avx_pthreads_la-queue.lo \
	libpll_avx_pthreads_la-utils.lo \
	libpll_avx_pthreads_la-randomTree.lo \
	libpll_avx_pthreads_la-optimizeModel.lo \
	libpll_avx_pthreads_la-trash.lo \
	libpll_avx_pthreads_la-searchAlgo.lo \
	libpll_avx_pthreads_la-topologies.lo \
	libpll_avx_pthreads_la-fastDNAparsimony.lo \
	libpll_avx_pthreads_la-treeIO.lo \
	libpll_avx_pthreads_la-models.lo \
	libpll_avx_pthreads_la-evaluatePartialGenericSpecial.lo \
	libpll_avx_pthreads_la-evaluateGenericSpecial.lo \
	libpll_avx_pthreads_la-newviewGenericSpecial.lo \
	libpll_avx_pthreads_la-makenewzGenericSpecial.lo \
	libpll_avx_pthreads_la-bipartitionList.lo \
	libpll_avx_pthreads_la-restartHashTable.lo \
	libpll_avx_pthreads_la-recom.lo \
	libpll_avx_pthreads_la-lexer.lo \
	libpll_avx_pthreads_la-alignment.lo \
	libpll_avx_pthreads_la-newick.lo \
	libpll_avx_pthreads_la-parsePartition.lo \
	libpll_avx_pthreads_la-parsimony.lo
am_libpll_avx_pthreads_la_OBJECTS = libpll_avx_pthreads_la-avxLikelihood.lo \
	libpll_avx_pthreads_la-genericParallelization.lo \
	$(am__objects_9)
libpll_avx_pthreads_la_OBJECTS = $(am_libpll_avx_pthreads_la_OBJECTS)
libpll_avx_pthreads_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) \
	$(libpll_avx_pthreads_la_LDFLAGS) $(LDFLAGS) -o $@
am_libpll_avx_pthreads_la_rpath = -rpath \
	$(libdir)
libpll_avx_la_LIBADD =
am__libpll_avx_la_SOURCES_DIST = avxLikelihood.c hash.c stack.c \
	ssort.c queue.c utils.c randomTree.c optimizeModel.c trash.c \
	searchAlgo.c topologies.c fastDNAparsimony.c treeIO.c models.c \
	evaluatePartialGenericSpecial.c evaluateGenericSpecial.c \
	newviewGenericSpecial.c makenewzGenericSpecial.c \
	bipartitionList.c restartHashTable.c recom.c lexer.c \
	alignment.c newick.c parsePartition.c parsimony.c
am__objects_10 = libpll_avx_la-hash.lo libpll_avx_la-stack.lo \
	libpll_avx_la-ssort.lo libpll_avx_la-queue.lo \
	libpll_avx_la-utils.lo libpll_avx_la-randomTree.lo \
	libpll_avx_la-optimizeModel.lo libpll_avx_la-trash.lo \
	libpll_avx_la-searchAlgo.lo libpll_avx_la-topologies.lo \
	libpll_avx_la-fastDNAparsimony.lo libpll_avx_la-treeIO.lo \
	libpll_avx_la-models.lo \
	libpll_avx_la-evaluatePartialGenericSpecial.lo \
	libpll_avx_la-evaluateGenericSpecial.lo \
	libpll_avx_la-newviewGenericSpecial.lo \
	libpll_avx_la-makenewzGenericSpecial.lo \
	libpll_avx_la-bipartitionList.lo \
	libpll_avx_la-restartHashTable.lo libpll_avx_la-recom.lo \
	libpll_avx_la-lexer.lo libpll_avx_la-alignment.lo \
	libpll_avx_la-newick.lo libpll_avx_la-parsePartition.lo \
	libpll_avx_la-parsimony.lo
am_libpll_avx_la_OBJECTS =  \
	libpll_avx_la-avxLikelihood.lo \
	$(am__objects_10)
libpll_avx_la_OBJECTS = $(am_libpll_avx_la_OBJECTS)
libpll_avx_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(libpll_avx_la_CFLAGS) \
	$(CFLAGS) $(libpll_avx_la_LDFLAGS) $(LDFLAGS) -o $@
am_libpll_avx_la_rpath = -rpath $(libdir)
libpll_sse3_pthreads_la_LIBADD =
am__libpll_sse3_pthreads_la_SOURCES_DIST = genericParallelization.c \
	hash.c stack.c ssort.c queue.c utils.c randomTree.c \
	optimizeModel.c trash.c searchAlgo.c topologies.c \
	fastDNAparsimony.c treeIO.c models.c \
	evaluatePartialGenericSpecial.c evaluateGenericSpecial.c \
	newviewGenericSpecial.c makenewzGenericSpecial.c \
	bipartitionList.c restartHashTable.c recom.c lexer.c \
	alignment.c newick.c parsePartition.c parsimony.c
am__objects_11 = libpll_sse3_pthreads_la-hash.lo \
	libpll_sse3_pthreads_la-stack.lo \
	libpll_sse3_pthreads_la-ssort.lo \
	libpll_sse3_pthreads_la-queue.lo \
	libpll_sse3_pthreads_la-utils.lo \
	libpll_sse3_pthreads_la-randomTree.lo \
	libpll_sse3_pthreads_la-optimizeModel.lo \
	libpll_sse3_pthreads_la-trash.lo \
	libpll_sse3_pthreads_la-searchAlgo.lo \
	libpll_sse3_pthreads_la-topologies.lo \
	libpll_sse3_pthreads_la-fastDNAparsimony.lo \
	libpll_sse3_pthreads_la-treeIO.lo \
	libpll_sse3_pthreads_la-models.lo \
	libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.lo \
	libpll_sse3_pthreads_la-evaluateGenericSpecial.lo \
	libpll_sse3_pthreads_la-newviewGenericSpecial.lo \
	libpll_sse3_pthreads_la-makenewzGenericSpecial.lo \
	libpll_sse3_pthreads_la-bipartitionList.lo \
	libpll_sse3_pthreads_la-restartHashTable.lo \
	libpll_sse3_pthreads_la-recom.lo \
	libpll_sse3_pthreads_la-lexer.lo \
	libpll_sse3_pthreads_la-alignment.lo \
	libpll_sse3_pthreads_la-newick.lo \
	libpll_sse3_pthreads_la-parsePartition.lo \
	libpll_sse3_pthreads_la-parsimony.lo
am_libpll_sse3_pthreads_la_OBJECTS = libpll_sse3_pthreads_la-genericParallelization.lo \
	$(am__objects_11)
libpll_sse3_pthreads_la_OBJECTS =  \
	$(am_libpll_sse3_pthreads_la_OBJECTS)
libpll_sse3_pthreads_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) \
	$(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) \
	$(libpll_sse3_pthreads_la_LDFLAGS) $(LDFLAGS) -o $@
am_libpll_sse3_pthreads_la_rpath = -rpath \
	$(libdir)
libpll_sse3_la_LIBADD =
am__libpll_sse3_la_SOURCES_DIST = hash.c stack.c ssort.c queue.c \
	utils.c randomTree.c optimizeModel.c trash.c searchAlgo.c \
	topologies.c fastDNAparsimony.c treeIO.c models.c \
	evaluatePartialGenericSpecial.c evaluateGenericSpecial.c \
	newviewGenericSpecial.c makenewzGenericSpecial.c \
	bipartitionList.c restartHashTable.c recom.c lexer.c \
	alignment.c newick.c parsePartition.c parsimony.c
am__objects_12 = libpll_sse3_la-hash.lo libpll_sse3_la-stack.lo \
	libpll_sse3_la-ssort.lo libpll_sse3_la-queue.lo \
	libpll_sse3_la-utils.lo libpll_sse3_la-randomTree.lo \
	libpll_sse3_la-optimizeModel.lo libpll_sse3_la-trash.lo \
	libpll_sse3_la-searchAlgo.lo libpll_sse3_la-topologies.lo \
	libpll_sse3_la-fastDNAparsimony.lo libpll_sse3_la-treeIO.lo \
	libpll_sse3_la-models.lo \
	libpll_sse3_la-evaluatePartialGenericSpecial.lo \
	libpll_sse3_la-evaluateGenericSpecial.lo \
	libpll_sse3_la-newviewGenericSpecial.lo \
	libpll_sse3_la-makenewzGenericSpecial.lo \
	libpll_sse3_la-bipartitionList.lo \
	libpll_sse3_la-restartHashTable.lo libpll_sse3_la-recom.lo \
	libpll_sse3_la-lexer.lo libpll_sse3_la-alignment.lo \
	libpll_sse3_la-newick.lo libpll_sse3_la-parsePartition.lo \
	libpll_sse3_la-parsimony.lo
am_libpll_sse3_la_OBJECTS = $(am__objects_12)
libpll_sse3_la_OBJECTS = $(am_libpll_sse3_la_OBJECTS)
libpll_sse3_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(libpll_sse3_la_CFLAGS) \
	$(CFLAGS) $(libpll_sse3_la_LDFLAGS) $(LDFLAGS) -o $@
am_libpll_sse3_la_rpath = -rpath $(libdir)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libpll_avx_pthreads_a_SOURCES) $(libpll_avx_a_SOURCES) \
	$(libpll_sse3_pthreads_a_SOURCES) $(libpll_sse3_a_SOURCES) \
	$(libpll_avx_pthreads_la_SOURCES) $(libpll_avx_la_SOURCES) \
	$(libpll_sse3_pthreads_la_SOURCES) $(libpll_sse3_la_SOURCES)
DIST_SOURCES = $(am__libpll_avx_pthreads_a_SOURCES_DIST) \
	$(am__libpll_avx_a_SOURCES_DIST) \
	$(am__libpll_sse3_pthreads_a_SOURCES_DIST) \
	$(am__libpll_sse3_a_SOURCES_DIST) \
	$(am__libpll_avx_pthreads_la_SOURCES_DIST) \
	$(am__libpll_avx_la_SOURCES_DIST) \
	$(am__libpll_sse3_pthreads_la_SOURCES_DIST) \
	$(am__libpll_sse3_la_SOURCES_DIST)
HEADERS = $(pkginclude_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
pkgincludedir = $(includedir)/pll
ACLOCAL = ${SHELL} /home/cristian/INSTALADOR/lib/Pll/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/cristian/INSTALADOR/lib/Pll/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/cristian/INSTALADOR/lib/Pll/missing --run autoconf
AUTOHEADER = ${SHELL} /home/cristian/INSTALADOR/lib/Pll/missing --run autoheader
AUTOMAKE = ${SHELL} /home/cristian/INSTALADOR/lib/Pll/missing --run automake-1.11
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld
LDFLAGS = 
LIBOBJS = 
LIBPLL_MAJOR = 1
LIBPLL_MINOR = 0
LIBPLL_REV = 0
LIBPLL_VERSION = 1.0.0
LIBS = -lpthread -lm 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/cristian/INSTALADOR/lib/Pll/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MPICC = gcc
MPILIBS = 
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = libpll
PACKAGE_BUGREPORT = Tomas.Flouri@h-its.org
PACKAGE_NAME = libpll
PACKAGE_STRING = libpll 1.0.0
PACKAGE_TARNAME = libpll
PACKAGE_URL = 
PACKAGE_VERSION = 1.0.0
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
SIMD_FLAGS =  -mavx
STRIP = strip
VERSION = 1.0.0
abs_builddir = /home/cristian/INSTALADOR/lib/Pll/src
abs_srcdir = /home/cristian/INSTALADOR/lib/Pll/src
abs_top_builddir = /home/cristian/INSTALADOR/lib/Pll
abs_top_srcdir = /home/cristian/INSTALADOR/lib/Pll
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/cristian/INSTALADOR/lib/Pll/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /home/cristian/INSTALADOR/lib/Pll/src
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..

#lib_LTLIBRARIES = libpll-generic.la
lib_LTLIBRARIES = $(am__append_1) $(am__append_3) $(am__append_5) \
	$(am__append_7)
#lib_LIBRARIES = libpll-generic.a
lib_LIBRARIES = $(am__append_2) $(am__append_4) $(am__append_6) \
	$(am__append_8)
libpll_generic_la_SOURCES = hash.c stack.c ssort.c queue.c utils.c randomTree.c optimizeModel.c trash.c searchAlgo.c topologies.c fastDNAparsimony.c treeIO.c models.c evaluatePartialGenericSpecial.c evaluateGenericSpecial.c newviewGenericSpecial.c makenewzGenericSpecial.c bipartitionList.c restartHashTable.c recom.c lexer.c alignment.c newick.c parsePartition.c parsimony.c
libpll_generic_la_CFLAGS = -c -D_GNU_SOURCE -O2 -fomit-frame-pointer -funroll-loops -Wall -Wredundant-decls  -Wreturn-type  -Wswitch-default -Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int -Wimport -Wunused-label -Wno-int-to-pointer-cast -Wbad-function-cast  -Wmissing-declarations -Wmissing-prototypes  -Wnested-externs  -Wold-style-definition -Wstrict-prototypes -Wpointer-sign -Wextra -Wredundant-decls -Wunused -Wunused-function -Wunused-parameter -Wunused-value  -Wunused-variable -Wformat  -Wformat-nonliteral -Wparentheses -Wsequence-point -Wuninitialized -Wundef 
libpll_generic_la_LDFLAGS = -version-info 1:0:0
libpll_generic_a_SOURCES = $(libpll_generic_la_SOURCES)
libpll_generic_a_CFLAGS = $(libpll_generic_la_CFLAGS)
libpll_sse3_la_SOURCES = $(libpll_generic_la_SOURCES)
libpll_sse3_la_CFLAGS = -D__SSE3 -msse3 $(libpll_generic_la_CFLAGS)
libpll_sse3_la_LDFLAGS = -version-info 1:0:0
libpll_sse3_a_SOURCES = $(libpll_sse3_la_SOURCES)
libpll_sse3_a_CFLAGS = $(libpll_sse3_la_CFLAGS)
libpll_avx_la_SOURCES = avxLikelihood.c $(libpll_generic_la_SOURCES)
libpll_avx_la_CFLAGS = -D__SSE3 -D__AVX -mavx -msse3 $(libpll_generic_la_CFLAGS)
libpll_avx_la_LDFLAGS = -version-info 1:0:0
libpll_avx_a_SOURCES = $(libpll_avx_la_SOURCES)
libpll_avx_a_CFLAGS = $(libpll_avx_la_CFLAGS)
libpll_sse3_pthreads_la_SOURCES = genericParallelization.c $(libpll_generic_la_SOURCES)
libpll_sse3_pthreads_la_CFLAGS = -D_USE_PTHREADS -D__SSE3 -msse3 $(libpll_generic_la_CFLAGS)
libpll_sse3_pthreads_la_LDFLAGS = -version-info 1:0:0
libpll_sse3_pthreads_a_SOURCES = $(libpll_sse3_pthreads_la_SOURCES)
libpll_sse3_pthreads_a_CFLAGS = $(libpll_sse3_pthreads_la_CFLAGS)
libpll_avx_pthreads_la_SOURCES = avxLikelihood.c genericParallelization.c $(libpll_generic_la_SOURCES)
libpll_avx_pthreads_la_CFLAGS = -D_USE_PTHREADS -D__AVX -mavx -D__SSE3 -msse3 $(libpll_generic_la_CFLAGS)
libpll_avx_pthreads_la_LDFLAGS = -version-info 1:0:0
libpll_avx_pthreads_a_SOURCES = $(libpll_avx_pthreads_la_SOURCES)
libpll_avx_pthreads_a_CFLAGS = $(libpll_avx_pthreads_la_CFLAGS)
pkginclude_HEADERS = pll.h newick.h stack.h hash.h errcodes.h globalVariables.h lexer.h genericParallelization.h treeIO.h queue.h parsePartition.h mem_alloc.h cycle.h
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(INSTALL_DATA) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(INSTALL_DATA) $$list2 "$(DESTDIR)$(libdir)" || exit $$?; }
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  if test -f $$p; then \
	    $(am__strip_dir) \
	    echo " ( cd '$(DESTDIR)$(libdir)' && $(RANLIB) $$f )"; \
	    ( cd "$(DESTDIR)$(libdir)" && $(RANLIB) $$f ) || exit $$?; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; test -n "$(libdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libdir)' && rm -f "$$files" )"; \
	cd "$(DESTDIR)$(libdir)" && rm -f $$files

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
libpll-avx-pthreads.a: $(libpll_avx_pthreads_a_OBJECTS) $(libpll_avx_pthreads_a_DEPENDENCIES) 
	-rm -f libpll-avx-pthreads.a
	$(libpll_avx_pthreads_a_AR) libpll-avx-pthreads.a $(libpll_avx_pthreads_a_OBJECTS) $(libpll_avx_pthreads_a_LIBADD)
	$(RANLIB) libpll-avx-pthreads.a
libpll-avx.a: $(libpll_avx_a_OBJECTS) $(libpll_avx_a_DEPENDENCIES) 
	-rm -f libpll-avx.a
	$(libpll_avx_a_AR) libpll-avx.a $(libpll_avx_a_OBJECTS) $(libpll_avx_a_LIBADD)
	$(RANLIB) libpll-avx.a
libpll-sse3-pthreads.a: $(libpll_sse3_pthreads_a_OBJECTS) $(libpll_sse3_pthreads_a_DEPENDENCIES) 
	-rm -f libpll-sse3-pthreads.a
	$(libpll_sse3_pthreads_a_AR) libpll-sse3-pthreads.a $(libpll_sse3_pthreads_a_OBJECTS) $(libpll_sse3_pthreads_a_LIBADD)
	$(RANLIB) libpll-sse3-pthreads.a
libpll-sse3.a: $(libpll_sse3_a_OBJECTS) $(libpll_sse3_a_DEPENDENCIES) 
	-rm -f libpll-sse3.a
	$(libpll_sse3_a_AR) libpll-sse3.a $(libpll_sse3_a_OBJECTS) $(libpll_sse3_a_LIBADD)
	$(RANLIB) libpll-sse3.a
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libpll-avx-pthreads.la: $(libpll_avx_pthreads_la_OBJECTS) $(libpll_avx_pthreads_la_DEPENDENCIES) 
	$(libpll_avx_pthreads_la_LINK) $(am_libpll_avx_pthreads_la_rpath) $(libpll_avx_pthreads_la_OBJECTS) $(libpll_avx_pthreads_la_LIBADD) $(LIBS)
libpll-avx.la: $(libpll_avx_la_OBJECTS) $(libpll_avx_la_DEPENDENCIES) 
	$(libpll_avx_la_LINK) $(am_libpll_avx_la_rpath) $(libpll_avx_la_OBJECTS) $(libpll_avx_la_LIBADD) $(LIBS)
libpll-sse3-pthreads.la: $(libpll_sse3_pthreads_la_OBJECTS) $(libpll_sse3_pthreads_la_DEPENDENCIES) 
	$(libpll_sse3_pthreads_la_LINK) $(am_libpll_sse3_pthreads_la_rpath) $(libpll_sse3_pthreads_la_OBJECTS) $(libpll_sse3_pthreads_la_LIBADD) $(LIBS)
libpll-sse3.la: $(libpll_sse3_la_OBJECTS) $(libpll_sse3_la_DEPENDENCIES) 
	$(libpll_sse3_la_LINK) $(am_libpll_sse3_la_rpath) $(libpll_sse3_la_OBJECTS) $(libpll_sse3_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libpll_avx_a-alignment.Po
include ./$(DEPDIR)/libpll_avx_a-avxLikelihood.Po
include ./$(DEPDIR)/libpll_avx_a-bipartitionList.Po
include ./$(DEPDIR)/libpll_avx_a-evaluateGenericSpecial.Po
include ./$(DEPDIR)/libpll_avx_a-evaluatePartialGenericSpecial.Po
include ./$(DEPDIR)/libpll_avx_a-fastDNAparsimony.Po
include ./$(DEPDIR)/libpll_avx_a-hash.Po
include ./$(DEPDIR)/libpll_avx_a-lexer.Po
include ./$(DEPDIR)/libpll_avx_a-makenewzGenericSpecial.Po
include ./$(DEPDIR)/libpll_avx_a-models.Po
include ./$(DEPDIR)/libpll_avx_a-newick.Po
include ./$(DEPDIR)/libpll_avx_a-newviewGenericSpecial.Po
include ./$(DEPDIR)/libpll_avx_a-optimizeModel.Po
include ./$(DEPDIR)/libpll_avx_a-parsePartition.Po
include ./$(DEPDIR)/libpll_avx_a-parsimony.Po
include ./$(DEPDIR)/libpll_avx_a-queue.Po
include ./$(DEPDIR)/libpll_avx_a-randomTree.Po
include ./$(DEPDIR)/libpll_avx_a-recom.Po
include ./$(DEPDIR)/libpll_avx_a-restartHashTable.Po
include ./$(DEPDIR)/libpll_avx_a-searchAlgo.Po
include ./$(DEPDIR)/libpll_avx_a-ssort.Po
include ./$(DEPDIR)/libpll_avx_a-stack.Po
include ./$(DEPDIR)/libpll_avx_a-topologies.Po
include ./$(DEPDIR)/libpll_avx_a-trash.Po
include ./$(DEPDIR)/libpll_avx_a-treeIO.Po
include ./$(DEPDIR)/libpll_avx_a-utils.Po
include ./$(DEPDIR)/libpll_avx_la-alignment.Plo
include ./$(DEPDIR)/libpll_avx_la-avxLikelihood.Plo
include ./$(DEPDIR)/libpll_avx_la-bipartitionList.Plo
include ./$(DEPDIR)/libpll_avx_la-evaluateGenericSpecial.Plo
include ./$(DEPDIR)/libpll_avx_la-evaluatePartialGenericSpecial.Plo
include ./$(DEPDIR)/libpll_avx_la-fastDNAparsimony.Plo
include ./$(DEPDIR)/libpll_avx_la-hash.Plo
include ./$(DEPDIR)/libpll_avx_la-lexer.Plo
include ./$(DEPDIR)/libpll_avx_la-makenewzGenericSpecial.Plo
include ./$(DEPDIR)/libpll_avx_la-models.Plo
include ./$(DEPDIR)/libpll_avx_la-newick.Plo
include ./$(DEPDIR)/libpll_avx_la-newviewGenericSpecial.Plo
include ./$(DEPDIR)/libpll_avx_la-optimizeModel.Plo
include ./$(DEPDIR)/libpll_avx_la-parsePartition.Plo
include ./$(DEPDIR)/libpll_avx_la-parsimony.Plo
include ./$(DEPDIR)/libpll_avx_la-queue.Plo
include ./$(DEPDIR)/libpll_avx_la-randomTree.Plo
include ./$(DEPDIR)/libpll_avx_la-recom.Plo
include ./$(DEPDIR)/libpll_avx_la-restartHashTable.Plo
include ./$(DEPDIR)/libpll_avx_la-searchAlgo.Plo
include ./$(DEPDIR)/libpll_avx_la-ssort.Plo
include ./$(DEPDIR)/libpll_avx_la-stack.Plo
include ./$(DEPDIR)/libpll_avx_la-topologies.Plo
include ./$(DEPDIR)/libpll_avx_la-trash.Plo
include ./$(DEPDIR)/libpll_avx_la-treeIO.Plo
include ./$(DEPDIR)/libpll_avx_la-utils.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_a-alignment.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-avxLikelihood.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-bipartitionList.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-evaluateGenericSpecial.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-evaluatePartialGenericSpecial.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-fastDNAparsimony.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-genericParallelization.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-hash.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-lexer.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-makenewzGenericSpecial.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-models.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-newick.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-newviewGenericSpecial.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-optimizeModel.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-parsePartition.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-parsimony.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-queue.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-randomTree.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-recom.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-restartHashTable.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-searchAlgo.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-ssort.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-stack.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-topologies.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-trash.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-treeIO.Po
include ./$(DEPDIR)/libpll_avx_pthreads_a-utils.Po
include ./$(DEPDIR)/libpll_avx_pthreads_la-alignment.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-avxLikelihood.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-bipartitionList.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-evaluateGenericSpecial.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-evaluatePartialGenericSpecial.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-fastDNAparsimony.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-genericParallelization.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-hash.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-lexer.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-makenewzGenericSpecial.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-models.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-newick.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-newviewGenericSpecial.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-optimizeModel.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-parsePartition.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-parsimony.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-queue.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-randomTree.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-recom.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-restartHashTable.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-searchAlgo.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-ssort.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-stack.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-topologies.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-trash.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-treeIO.Plo
include ./$(DEPDIR)/libpll_avx_pthreads_la-utils.Plo
include ./$(DEPDIR)/libpll_sse3_a-alignment.Po
include ./$(DEPDIR)/libpll_sse3_a-bipartitionList.Po
include ./$(DEPDIR)/libpll_sse3_a-evaluateGenericSpecial.Po
include ./$(DEPDIR)/libpll_sse3_a-evaluatePartialGenericSpecial.Po
include ./$(DEPDIR)/libpll_sse3_a-fastDNAparsimony.Po
include ./$(DEPDIR)/libpll_sse3_a-hash.Po
include ./$(DEPDIR)/libpll_sse3_a-lexer.Po
include ./$(DEPDIR)/libpll_sse3_a-makenewzGenericSpecial.Po
include ./$(DEPDIR)/libpll_sse3_a-models.Po
include ./$(DEPDIR)/libpll_sse3_a-newick.Po
include ./$(DEPDIR)/libpll_sse3_a-newviewGenericSpecial.Po
include ./$(DEPDIR)/libpll_sse3_a-optimizeModel.Po
include ./$(DEPDIR)/libpll_sse3_a-parsePartition.Po
include ./$(DEPDIR)/libpll_sse3_a-parsimony.Po
include ./$(DEPDIR)/libpll_sse3_a-queue.Po
include ./$(DEPDIR)/libpll_sse3_a-randomTree.Po
include ./$(DEPDIR)/libpll_sse3_a-recom.Po
include ./$(DEPDIR)/libpll_sse3_a-restartHashTable.Po
include ./$(DEPDIR)/libpll_sse3_a-searchAlgo.Po
include ./$(DEPDIR)/libpll_sse3_a-ssort.Po
include ./$(DEPDIR)/libpll_sse3_a-stack.Po
include ./$(DEPDIR)/libpll_sse3_a-topologies.Po
include ./$(DEPDIR)/libpll_sse3_a-trash.Po
include ./$(DEPDIR)/libpll_sse3_a-treeIO.Po
include ./$(DEPDIR)/libpll_sse3_a-utils.Po
include ./$(DEPDIR)/libpll_sse3_la-alignment.Plo
include ./$(DEPDIR)/libpll_sse3_la-bipartitionList.Plo
include ./$(DEPDIR)/libpll_sse3_la-evaluateGenericSpecial.Plo
include ./$(DEPDIR)/libpll_sse3_la-evaluatePartialGenericSpecial.Plo
include ./$(DEPDIR)/libpll_sse3_la-fastDNAparsimony.Plo
include ./$(DEPDIR)/libpll_sse3_la-hash.Plo
include ./$(DEPDIR)/libpll_sse3_la-lexer.Plo
include ./$(DEPDIR)/libpll_sse3_la-makenewzGenericSpecial.Plo
include ./$(DEPDIR)/libpll_sse3_la-models.Plo
include ./$(DEPDIR)/libpll_sse3_la-newick.Plo
include ./$(DEPDIR)/libpll_sse3_la-newviewGenericSpecial.Plo
include ./$(DEPDIR)/libpll_sse3_la-optimizeModel.Plo
include ./$(DEPDIR)/libpll_sse3_la-parsePartition.Plo
include ./$(DEPDIR)/libpll_sse3_la-parsimony.Plo
include ./$(DEPDIR)/libpll_sse3_la-queue.Plo
include ./$(DEPDIR)/libpll_sse3_la-randomTree.Plo
include ./$(DEPDIR)/libpll_sse3_la-recom.Plo
include ./$(DEPDIR)/libpll_sse3_la-restartHashTable.Plo
include ./$(DEPDIR)/libpll_sse3_la-searchAlgo.Plo
include ./$(DEPDIR)/libpll_sse3_la-ssort.Plo
include ./$(DEPDIR)/libpll_sse3_la-stack.Plo
include ./$(DEPDIR)/libpll_sse3_la-topologies.Plo
include ./$(DEPDIR)/libpll_sse3_la-trash.Plo
include ./$(DEPDIR)/libpll_sse3_la-treeIO.Plo
include ./$(DEPDIR)/libpll_sse3_la-utils.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_a-alignment.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-bipartitionList.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-evaluateGenericSpecial.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-fastDNAparsimony.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-genericParallelization.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-hash.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-lexer.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-makenewzGenericSpecial.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-models.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-newick.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-newviewGenericSpecial.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-optimizeModel.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-parsePartition.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-parsimony.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-queue.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-randomTree.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-recom.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-restartHashTable.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-searchAlgo.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-ssort.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-stack.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-topologies.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-trash.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-treeIO.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_a-utils.Po
include ./$(DEPDIR)/libpll_sse3_pthreads_la-alignment.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-bipartitionList.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-evaluateGenericSpecial.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-fastDNAparsimony.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-genericParallelization.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-hash.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-lexer.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-makenewzGenericSpecial.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-models.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-newick.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-newviewGenericSpecial.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-optimizeModel.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-parsePartition.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-parsimony.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-queue.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-randomTree.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-recom.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-restartHashTable.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-searchAlgo.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-ssort.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-stack.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-topologies.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-trash.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-treeIO.Plo
include ./$(DEPDIR)/libpll_sse3_pthreads_la-utils.Plo

.c.o:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c -o $@ $<

.c.obj:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
	depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

libpll_avx_pthreads_a-avxLikelihood.o: avxLikelihood.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-avxLikelihood.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-avxLikelihood.Tpo -c -o libpll_avx_pthreads_a-avxLikelihood.o `test -f 'avxLikelihood.c' || echo '$(srcdir)/'`avxLikelihood.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-avxLikelihood.Tpo $(DEPDIR)/libpll_avx_pthreads_a-avxLikelihood.Po
#	source='avxLikelihood.c' object='libpll_avx_pthreads_a-avxLikelihood.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-avxLikelihood.o `test -f 'avxLikelihood.c' || echo '$(srcdir)/'`avxLikelihood.c

libpll_avx_pthreads_a-avxLikelihood.obj: avxLikelihood.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-avxLikelihood.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-avxLikelihood.Tpo -c -o libpll_avx_pthreads_a-avxLikelihood.obj `if test -f 'avxLikelihood.c'; then $(CYGPATH_W) 'avxLikelihood.c'; else $(CYGPATH_W) '$(srcdir)/avxLikelihood.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-avxLikelihood.Tpo $(DEPDIR)/libpll_avx_pthreads_a-avxLikelihood.Po
#	source='avxLikelihood.c' object='libpll_avx_pthreads_a-avxLikelihood.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-avxLikelihood.obj `if test -f 'avxLikelihood.c'; then $(CYGPATH_W) 'avxLikelihood.c'; else $(CYGPATH_W) '$(srcdir)/avxLikelihood.c'; fi`

libpll_avx_pthreads_a-genericParallelization.o: genericParallelization.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-genericParallelization.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-genericParallelization.Tpo -c -o libpll_avx_pthreads_a-genericParallelization.o `test -f 'genericParallelization.c' || echo '$(srcdir)/'`genericParallelization.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-genericParallelization.Tpo $(DEPDIR)/libpll_avx_pthreads_a-genericParallelization.Po
#	source='genericParallelization.c' object='libpll_avx_pthreads_a-genericParallelization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-genericParallelization.o `test -f 'genericParallelization.c' || echo '$(srcdir)/'`genericParallelization.c

libpll_avx_pthreads_a-genericParallelization.obj: genericParallelization.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-genericParallelization.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-genericParallelization.Tpo -c -o libpll_avx_pthreads_a-genericParallelization.obj `if test -f 'genericParallelization.c'; then $(CYGPATH_W) 'genericParallelization.c'; else $(CYGPATH_W) '$(srcdir)/genericParallelization.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-genericParallelization.Tpo $(DEPDIR)/libpll_avx_pthreads_a-genericParallelization.Po
#	source='genericParallelization.c' object='libpll_avx_pthreads_a-genericParallelization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-genericParallelization.obj `if test -f 'genericParallelization.c'; then $(CYGPATH_W) 'genericParallelization.c'; else $(CYGPATH_W) '$(srcdir)/genericParallelization.c'; fi`

libpll_avx_pthreads_a-hash.o: hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-hash.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-hash.Tpo -c -o libpll_avx_pthreads_a-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-hash.Tpo $(DEPDIR)/libpll_avx_pthreads_a-hash.Po
#	source='hash.c' object='libpll_avx_pthreads_a-hash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libpll_avx_pthreads_a-hash.obj: hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-hash.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-hash.Tpo -c -o libpll_avx_pthreads_a-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-hash.Tpo $(DEPDIR)/libpll_avx_pthreads_a-hash.Po
#	source='hash.c' object='libpll_avx_pthreads_a-hash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`

libpll_avx_pthreads_a-stack.o: stack.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-stack.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-stack.Tpo -c -o libpll_avx_pthreads_a-stack.o `test -f 'stack.c' || echo '$(srcdir)/'`stack.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-stack.Tpo $(DEPDIR)/libpll_avx_pthreads_a-stack.Po
#	source='stack.c' object='libpll_avx_pthreads_a-stack.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-stack.o `test -f 'stack.c' || echo '$(srcdir)/'`stack.c

libpll_avx_pthreads_a-stack.obj: stack.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-stack.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-stack.Tpo -c -o libpll_avx_pthreads_a-stack.obj `if test -f 'stack.c'; then $(CYGPATH_W) 'stack.c'; else $(CYGPATH_W) '$(srcdir)/stack.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-stack.Tpo $(DEPDIR)/libpll_avx_pthreads_a-stack.Po
#	source='stack.c' object='libpll_avx_pthreads_a-stack.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-stack.obj `if test -f 'stack.c'; then $(CYGPATH_W) 'stack.c'; else $(CYGPATH_W) '$(srcdir)/stack.c'; fi`

libpll_avx_pthreads_a-ssort.o: ssort.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-ssort.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-ssort.Tpo -c -o libpll_avx_pthreads_a-ssort.o `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-ssort.Tpo $(DEPDIR)/libpll_avx_pthreads_a-ssort.Po
#	source='ssort.c' object='libpll_avx_pthreads_a-ssort.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-ssort.o `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c

libpll_avx_pthreads_a-ssort.obj: ssort.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-ssort.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-ssort.Tpo -c -o libpll_avx_pthreads_a-ssort.obj `if test -f 'ssort.c'; then $(CYGPATH_W) 'ssort.c'; else $(CYGPATH_W) '$(srcdir)/ssort.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-ssort.Tpo $(DEPDIR)/libpll_avx_pthreads_a-ssort.Po
#	source='ssort.c' object='libpll_avx_pthreads_a-ssort.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-ssort.obj `if test -f 'ssort.c'; then $(CYGPATH_W) 'ssort.c'; else $(CYGPATH_W) '$(srcdir)/ssort.c'; fi`

libpll_avx_pthreads_a-queue.o: queue.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-queue.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-queue.Tpo -c -o libpll_avx_pthreads_a-queue.o `test -f 'queue.c' || echo '$(srcdir)/'`queue.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-queue.Tpo $(DEPDIR)/libpll_avx_pthreads_a-queue.Po
#	source='queue.c' object='libpll_avx_pthreads_a-queue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-queue.o `test -f 'queue.c' || echo '$(srcdir)/'`queue.c

libpll_avx_pthreads_a-queue.obj: queue.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-queue.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-queue.Tpo -c -o libpll_avx_pthreads_a-queue.obj `if test -f 'queue.c'; then $(CYGPATH_W) 'queue.c'; else $(CYGPATH_W) '$(srcdir)/queue.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-queue.Tpo $(DEPDIR)/libpll_avx_pthreads_a-queue.Po
#	source='queue.c' object='libpll_avx_pthreads_a-queue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-queue.obj `if test -f 'queue.c'; then $(CYGPATH_W) 'queue.c'; else $(CYGPATH_W) '$(srcdir)/queue.c'; fi`

libpll_avx_pthreads_a-utils.o: utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-utils.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-utils.Tpo -c -o libpll_avx_pthreads_a-utils.o `test -f 'utils.c' || echo '$(srcdir)/'`utils.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-utils.Tpo $(DEPDIR)/libpll_avx_pthreads_a-utils.Po
#	source='utils.c' object='libpll_avx_pthreads_a-utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-utils.o `test -f 'utils.c' || echo '$(srcdir)/'`utils.c

libpll_avx_pthreads_a-utils.obj: utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-utils.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-utils.Tpo -c -o libpll_avx_pthreads_a-utils.obj `if test -f 'utils.c'; then $(CYGPATH_W) 'utils.c'; else $(CYGPATH_W) '$(srcdir)/utils.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-utils.Tpo $(DEPDIR)/libpll_avx_pthreads_a-utils.Po
#	source='utils.c' object='libpll_avx_pthreads_a-utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-utils.obj `if test -f 'utils.c'; then $(CYGPATH_W) 'utils.c'; else $(CYGPATH_W) '$(srcdir)/utils.c'; fi`

libpll_avx_pthreads_a-randomTree.o: randomTree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-randomTree.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-randomTree.Tpo -c -o libpll_avx_pthreads_a-randomTree.o `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-randomTree.Tpo $(DEPDIR)/libpll_avx_pthreads_a-randomTree.Po
#	source='randomTree.c' object='libpll_avx_pthreads_a-randomTree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-randomTree.o `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c

libpll_avx_pthreads_a-randomTree.obj: randomTree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-randomTree.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-randomTree.Tpo -c -o libpll_avx_pthreads_a-randomTree.obj `if test -f 'randomTree.c'; then $(CYGPATH_W) 'randomTree.c'; else $(CYGPATH_W) '$(srcdir)/randomTree.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-randomTree.Tpo $(DEPDIR)/libpll_avx_pthreads_a-randomTree.Po
#	source='randomTree.c' object='libpll_avx_pthreads_a-randomTree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-randomTree.obj `if test -f 'randomTree.c'; then $(CYGPATH_W) 'randomTree.c'; else $(CYGPATH_W) '$(srcdir)/randomTree.c'; fi`

libpll_avx_pthreads_a-optimizeModel.o: optimizeModel.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-optimizeModel.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-optimizeModel.Tpo -c -o libpll_avx_pthreads_a-optimizeModel.o `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-optimizeModel.Tpo $(DEPDIR)/libpll_avx_pthreads_a-optimizeModel.Po
#	source='optimizeModel.c' object='libpll_avx_pthreads_a-optimizeModel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-optimizeModel.o `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c

libpll_avx_pthreads_a-optimizeModel.obj: optimizeModel.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-optimizeModel.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-optimizeModel.Tpo -c -o libpll_avx_pthreads_a-optimizeModel.obj `if test -f 'optimizeModel.c'; then $(CYGPATH_W) 'optimizeModel.c'; else $(CYGPATH_W) '$(srcdir)/optimizeModel.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-optimizeModel.Tpo $(DEPDIR)/libpll_avx_pthreads_a-optimizeModel.Po
#	source='optimizeModel.c' object='libpll_avx_pthreads_a-optimizeModel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-optimizeModel.obj `if test -f 'optimizeModel.c'; then $(CYGPATH_W) 'optimizeModel.c'; else $(CYGPATH_W) '$(srcdir)/optimizeModel.c'; fi`

libpll_avx_pthreads_a-trash.o: trash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-trash.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-trash.Tpo -c -o libpll_avx_pthreads_a-trash.o `test -f 'trash.c' || echo '$(srcdir)/'`trash.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-trash.Tpo $(DEPDIR)/libpll_avx_pthreads_a-trash.Po
#	source='trash.c' object='libpll_avx_pthreads_a-trash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-trash.o `test -f 'trash.c' || echo '$(srcdir)/'`trash.c

libpll_avx_pthreads_a-trash.obj: trash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-trash.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-trash.Tpo -c -o libpll_avx_pthreads_a-trash.obj `if test -f 'trash.c'; then $(CYGPATH_W) 'trash.c'; else $(CYGPATH_W) '$(srcdir)/trash.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-trash.Tpo $(DEPDIR)/libpll_avx_pthreads_a-trash.Po
#	source='trash.c' object='libpll_avx_pthreads_a-trash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-trash.obj `if test -f 'trash.c'; then $(CYGPATH_W) 'trash.c'; else $(CYGPATH_W) '$(srcdir)/trash.c'; fi`

libpll_avx_pthreads_a-searchAlgo.o: searchAlgo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-searchAlgo.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-searchAlgo.Tpo -c -o libpll_avx_pthreads_a-searchAlgo.o `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-searchAlgo.Tpo $(DEPDIR)/libpll_avx_pthreads_a-searchAlgo.Po
#	source='searchAlgo.c' object='libpll_avx_pthreads_a-searchAlgo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-searchAlgo.o `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c

libpll_avx_pthreads_a-searchAlgo.obj: searchAlgo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-searchAlgo.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-searchAlgo.Tpo -c -o libpll_avx_pthreads_a-searchAlgo.obj `if test -f 'searchAlgo.c'; then $(CYGPATH_W) 'searchAlgo.c'; else $(CYGPATH_W) '$(srcdir)/searchAlgo.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-searchAlgo.Tpo $(DEPDIR)/libpll_avx_pthreads_a-searchAlgo.Po
#	source='searchAlgo.c' object='libpll_avx_pthreads_a-searchAlgo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-searchAlgo.obj `if test -f 'searchAlgo.c'; then $(CYGPATH_W) 'searchAlgo.c'; else $(CYGPATH_W) '$(srcdir)/searchAlgo.c'; fi`

libpll_avx_pthreads_a-topologies.o: topologies.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-topologies.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-topologies.Tpo -c -o libpll_avx_pthreads_a-topologies.o `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-topologies.Tpo $(DEPDIR)/libpll_avx_pthreads_a-topologies.Po
#	source='topologies.c' object='libpll_avx_pthreads_a-topologies.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-topologies.o `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c

libpll_avx_pthreads_a-topologies.obj: topologies.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-topologies.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-topologies.Tpo -c -o libpll_avx_pthreads_a-topologies.obj `if test -f 'topologies.c'; then $(CYGPATH_W) 'topologies.c'; else $(CYGPATH_W) '$(srcdir)/topologies.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-topologies.Tpo $(DEPDIR)/libpll_avx_pthreads_a-topologies.Po
#	source='topologies.c' object='libpll_avx_pthreads_a-topologies.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-topologies.obj `if test -f 'topologies.c'; then $(CYGPATH_W) 'topologies.c'; else $(CYGPATH_W) '$(srcdir)/topologies.c'; fi`

libpll_avx_pthreads_a-fastDNAparsimony.o: fastDNAparsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-fastDNAparsimony.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-fastDNAparsimony.Tpo -c -o libpll_avx_pthreads_a-fastDNAparsimony.o `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-fastDNAparsimony.Tpo $(DEPDIR)/libpll_avx_pthreads_a-fastDNAparsimony.Po
#	source='fastDNAparsimony.c' object='libpll_avx_pthreads_a-fastDNAparsimony.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-fastDNAparsimony.o `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c

libpll_avx_pthreads_a-fastDNAparsimony.obj: fastDNAparsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-fastDNAparsimony.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-fastDNAparsimony.Tpo -c -o libpll_avx_pthreads_a-fastDNAparsimony.obj `if test -f 'fastDNAparsimony.c'; then $(CYGPATH_W) 'fastDNAparsimony.c'; else $(CYGPATH_W) '$(srcdir)/fastDNAparsimony.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-fastDNAparsimony.Tpo $(DEPDIR)/libpll_avx_pthreads_a-fastDNAparsimony.Po
#	source='fastDNAparsimony.c' object='libpll_avx_pthreads_a-fastDNAparsimony.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-fastDNAparsimony.obj `if test -f 'fastDNAparsimony.c'; then $(CYGPATH_W) 'fastDNAparsimony.c'; else $(CYGPATH_W) '$(srcdir)/fastDNAparsimony.c'; fi`

libpll_avx_pthreads_a-treeIO.o: treeIO.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-treeIO.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-treeIO.Tpo -c -o libpll_avx_pthreads_a-treeIO.o `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-treeIO.Tpo $(DEPDIR)/libpll_avx_pthreads_a-treeIO.Po
#	source='treeIO.c' object='libpll_avx_pthreads_a-treeIO.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-treeIO.o `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c

libpll_avx_pthreads_a-treeIO.obj: treeIO.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-treeIO.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-treeIO.Tpo -c -o libpll_avx_pthreads_a-treeIO.obj `if test -f 'treeIO.c'; then $(CYGPATH_W) 'treeIO.c'; else $(CYGPATH_W) '$(srcdir)/treeIO.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-treeIO.Tpo $(DEPDIR)/libpll_avx_pthreads_a-treeIO.Po
#	source='treeIO.c' object='libpll_avx_pthreads_a-treeIO.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-treeIO.obj `if test -f 'treeIO.c'; then $(CYGPATH_W) 'treeIO.c'; else $(CYGPATH_W) '$(srcdir)/treeIO.c'; fi`

libpll_avx_pthreads_a-models.o: models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-models.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-models.Tpo -c -o libpll_avx_pthreads_a-models.o `test -f 'models.c' || echo '$(srcdir)/'`models.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-models.Tpo $(DEPDIR)/libpll_avx_pthreads_a-models.Po
#	source='models.c' object='libpll_avx_pthreads_a-models.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-models.o `test -f 'models.c' || echo '$(srcdir)/'`models.c

libpll_avx_pthreads_a-models.obj: models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-models.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-models.Tpo -c -o libpll_avx_pthreads_a-models.obj `if test -f 'models.c'; then $(CYGPATH_W) 'models.c'; else $(CYGPATH_W) '$(srcdir)/models.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-models.Tpo $(DEPDIR)/libpll_avx_pthreads_a-models.Po
#	source='models.c' object='libpll_avx_pthreads_a-models.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-models.obj `if test -f 'models.c'; then $(CYGPATH_W) 'models.c'; else $(CYGPATH_W) '$(srcdir)/models.c'; fi`

libpll_avx_pthreads_a-evaluatePartialGenericSpecial.o: evaluatePartialGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-evaluatePartialGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-evaluatePartialGenericSpecial.Tpo -c -o libpll_avx_pthreads_a-evaluatePartialGenericSpecial.o `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_a-evaluatePartialGenericSpecial.Po
#	source='evaluatePartialGenericSpecial.c' object='libpll_avx_pthreads_a-evaluatePartialGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-evaluatePartialGenericSpecial.o `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c

libpll_avx_pthreads_a-evaluatePartialGenericSpecial.obj: evaluatePartialGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-evaluatePartialGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-evaluatePartialGenericSpecial.Tpo -c -o libpll_avx_pthreads_a-evaluatePartialGenericSpecial.obj `if test -f 'evaluatePartialGenericSpecial.c'; then $(CYGPATH_W) 'evaluatePartialGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluatePartialGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_a-evaluatePartialGenericSpecial.Po
#	source='evaluatePartialGenericSpecial.c' object='libpll_avx_pthreads_a-evaluatePartialGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-evaluatePartialGenericSpecial.obj `if test -f 'evaluatePartialGenericSpecial.c'; then $(CYGPATH_W) 'evaluatePartialGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluatePartialGenericSpecial.c'; fi`

libpll_avx_pthreads_a-evaluateGenericSpecial.o: evaluateGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-evaluateGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-evaluateGenericSpecial.Tpo -c -o libpll_avx_pthreads_a-evaluateGenericSpecial.o `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_a-evaluateGenericSpecial.Po
#	source='evaluateGenericSpecial.c' object='libpll_avx_pthreads_a-evaluateGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-evaluateGenericSpecial.o `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c

libpll_avx_pthreads_a-evaluateGenericSpecial.obj: evaluateGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-evaluateGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-evaluateGenericSpecial.Tpo -c -o libpll_avx_pthreads_a-evaluateGenericSpecial.obj `if test -f 'evaluateGenericSpecial.c'; then $(CYGPATH_W) 'evaluateGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluateGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_a-evaluateGenericSpecial.Po
#	source='evaluateGenericSpecial.c' object='libpll_avx_pthreads_a-evaluateGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-evaluateGenericSpecial.obj `if test -f 'evaluateGenericSpecial.c'; then $(CYGPATH_W) 'evaluateGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluateGenericSpecial.c'; fi`

libpll_avx_pthreads_a-newviewGenericSpecial.o: newviewGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-newviewGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-newviewGenericSpecial.Tpo -c -o libpll_avx_pthreads_a-newviewGenericSpecial.o `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_a-newviewGenericSpecial.Po
#	source='newviewGenericSpecial.c' object='libpll_avx_pthreads_a-newviewGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-newviewGenericSpecial.o `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c

libpll_avx_pthreads_a-newviewGenericSpecial.obj: newviewGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-newviewGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-newviewGenericSpecial.Tpo -c -o libpll_avx_pthreads_a-newviewGenericSpecial.obj `if test -f 'newviewGenericSpecial.c'; then $(CYGPATH_W) 'newviewGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/newviewGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_a-newviewGenericSpecial.Po
#	source='newviewGenericSpecial.c' object='libpll_avx_pthreads_a-newviewGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-newviewGenericSpecial.obj `if test -f 'newviewGenericSpecial.c'; then $(CYGPATH_W) 'newviewGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/newviewGenericSpecial.c'; fi`

libpll_avx_pthreads_a-makenewzGenericSpecial.o: makenewzGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-makenewzGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-makenewzGenericSpecial.Tpo -c -o libpll_avx_pthreads_a-makenewzGenericSpecial.o `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_a-makenewzGenericSpecial.Po
#	source='makenewzGenericSpecial.c' object='libpll_avx_pthreads_a-makenewzGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-makenewzGenericSpecial.o `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c

libpll_avx_pthreads_a-makenewzGenericSpecial.obj: makenewzGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-makenewzGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-makenewzGenericSpecial.Tpo -c -o libpll_avx_pthreads_a-makenewzGenericSpecial.obj `if test -f 'makenewzGenericSpecial.c'; then $(CYGPATH_W) 'makenewzGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/makenewzGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_a-makenewzGenericSpecial.Po
#	source='makenewzGenericSpecial.c' object='libpll_avx_pthreads_a-makenewzGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-makenewzGenericSpecial.obj `if test -f 'makenewzGenericSpecial.c'; then $(CYGPATH_W) 'makenewzGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/makenewzGenericSpecial.c'; fi`

libpll_avx_pthreads_a-bipartitionList.o: bipartitionList.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-bipartitionList.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-bipartitionList.Tpo -c -o libpll_avx_pthreads_a-bipartitionList.o `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-bipartitionList.Tpo $(DEPDIR)/libpll_avx_pthreads_a-bipartitionList.Po
#	source='bipartitionList.c' object='libpll_avx_pthreads_a-bipartitionList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-bipartitionList.o `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c

libpll_avx_pthreads_a-bipartitionList.obj: bipartitionList.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-bipartitionList.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-bipartitionList.Tpo -c -o libpll_avx_pthreads_a-bipartitionList.obj `if test -f 'bipartitionList.c'; then $(CYGPATH_W) 'bipartitionList.c'; else $(CYGPATH_W) '$(srcdir)/bipartitionList.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-bipartitionList.Tpo $(DEPDIR)/libpll_avx_pthreads_a-bipartitionList.Po
#	source='bipartitionList.c' object='libpll_avx_pthreads_a-bipartitionList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-bipartitionList.obj `if test -f 'bipartitionList.c'; then $(CYGPATH_W) 'bipartitionList.c'; else $(CYGPATH_W) '$(srcdir)/bipartitionList.c'; fi`

libpll_avx_pthreads_a-restartHashTable.o: restartHashTable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-restartHashTable.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-restartHashTable.Tpo -c -o libpll_avx_pthreads_a-restartHashTable.o `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-restartHashTable.Tpo $(DEPDIR)/libpll_avx_pthreads_a-restartHashTable.Po
#	source='restartHashTable.c' object='libpll_avx_pthreads_a-restartHashTable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-restartHashTable.o `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c

libpll_avx_pthreads_a-restartHashTable.obj: restartHashTable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-restartHashTable.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-restartHashTable.Tpo -c -o libpll_avx_pthreads_a-restartHashTable.obj `if test -f 'restartHashTable.c'; then $(CYGPATH_W) 'restartHashTable.c'; else $(CYGPATH_W) '$(srcdir)/restartHashTable.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-restartHashTable.Tpo $(DEPDIR)/libpll_avx_pthreads_a-restartHashTable.Po
#	source='restartHashTable.c' object='libpll_avx_pthreads_a-restartHashTable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-restartHashTable.obj `if test -f 'restartHashTable.c'; then $(CYGPATH_W) 'restartHashTable.c'; else $(CYGPATH_W) '$(srcdir)/restartHashTable.c'; fi`

libpll_avx_pthreads_a-recom.o: recom.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-recom.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-recom.Tpo -c -o libpll_avx_pthreads_a-recom.o `test -f 'recom.c' || echo '$(srcdir)/'`recom.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-recom.Tpo $(DEPDIR)/libpll_avx_pthreads_a-recom.Po
#	source='recom.c' object='libpll_avx_pthreads_a-recom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-recom.o `test -f 'recom.c' || echo '$(srcdir)/'`recom.c

libpll_avx_pthreads_a-recom.obj: recom.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-recom.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-recom.Tpo -c -o libpll_avx_pthreads_a-recom.obj `if test -f 'recom.c'; then $(CYGPATH_W) 'recom.c'; else $(CYGPATH_W) '$(srcdir)/recom.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-recom.Tpo $(DEPDIR)/libpll_avx_pthreads_a-recom.Po
#	source='recom.c' object='libpll_avx_pthreads_a-recom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-recom.obj `if test -f 'recom.c'; then $(CYGPATH_W) 'recom.c'; else $(CYGPATH_W) '$(srcdir)/recom.c'; fi`

libpll_avx_pthreads_a-lexer.o: lexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-lexer.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-lexer.Tpo -c -o libpll_avx_pthreads_a-lexer.o `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-lexer.Tpo $(DEPDIR)/libpll_avx_pthreads_a-lexer.Po
#	source='lexer.c' object='libpll_avx_pthreads_a-lexer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-lexer.o `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c

libpll_avx_pthreads_a-lexer.obj: lexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-lexer.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-lexer.Tpo -c -o libpll_avx_pthreads_a-lexer.obj `if test -f 'lexer.c'; then $(CYGPATH_W) 'lexer.c'; else $(CYGPATH_W) '$(srcdir)/lexer.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-lexer.Tpo $(DEPDIR)/libpll_avx_pthreads_a-lexer.Po
#	source='lexer.c' object='libpll_avx_pthreads_a-lexer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-lexer.obj `if test -f 'lexer.c'; then $(CYGPATH_W) 'lexer.c'; else $(CYGPATH_W) '$(srcdir)/lexer.c'; fi`

libpll_avx_pthreads_a-alignment.o: alignment.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-alignment.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-alignment.Tpo -c -o libpll_avx_pthreads_a-alignment.o `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-alignment.Tpo $(DEPDIR)/libpll_avx_pthreads_a-alignment.Po
#	source='alignment.c' object='libpll_avx_pthreads_a-alignment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-alignment.o `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c

libpll_avx_pthreads_a-alignment.obj: alignment.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-alignment.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-alignment.Tpo -c -o libpll_avx_pthreads_a-alignment.obj `if test -f 'alignment.c'; then $(CYGPATH_W) 'alignment.c'; else $(CYGPATH_W) '$(srcdir)/alignment.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-alignment.Tpo $(DEPDIR)/libpll_avx_pthreads_a-alignment.Po
#	source='alignment.c' object='libpll_avx_pthreads_a-alignment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-alignment.obj `if test -f 'alignment.c'; then $(CYGPATH_W) 'alignment.c'; else $(CYGPATH_W) '$(srcdir)/alignment.c'; fi`

libpll_avx_pthreads_a-newick.o: newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-newick.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-newick.Tpo -c -o libpll_avx_pthreads_a-newick.o `test -f 'newick.c' || echo '$(srcdir)/'`newick.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-newick.Tpo $(DEPDIR)/libpll_avx_pthreads_a-newick.Po
#	source='newick.c' object='libpll_avx_pthreads_a-newick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-newick.o `test -f 'newick.c' || echo '$(srcdir)/'`newick.c

libpll_avx_pthreads_a-newick.obj: newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-newick.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-newick.Tpo -c -o libpll_avx_pthreads_a-newick.obj `if test -f 'newick.c'; then $(CYGPATH_W) 'newick.c'; else $(CYGPATH_W) '$(srcdir)/newick.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-newick.Tpo $(DEPDIR)/libpll_avx_pthreads_a-newick.Po
#	source='newick.c' object='libpll_avx_pthreads_a-newick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-newick.obj `if test -f 'newick.c'; then $(CYGPATH_W) 'newick.c'; else $(CYGPATH_W) '$(srcdir)/newick.c'; fi`

libpll_avx_pthreads_a-parsePartition.o: parsePartition.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-parsePartition.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-parsePartition.Tpo -c -o libpll_avx_pthreads_a-parsePartition.o `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-parsePartition.Tpo $(DEPDIR)/libpll_avx_pthreads_a-parsePartition.Po
#	source='parsePartition.c' object='libpll_avx_pthreads_a-parsePartition.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-parsePartition.o `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c

libpll_avx_pthreads_a-parsePartition.obj: parsePartition.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-parsePartition.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-parsePartition.Tpo -c -o libpll_avx_pthreads_a-parsePartition.obj `if test -f 'parsePartition.c'; then $(CYGPATH_W) 'parsePartition.c'; else $(CYGPATH_W) '$(srcdir)/parsePartition.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-parsePartition.Tpo $(DEPDIR)/libpll_avx_pthreads_a-parsePartition.Po
#	source='parsePartition.c' object='libpll_avx_pthreads_a-parsePartition.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-parsePartition.obj `if test -f 'parsePartition.c'; then $(CYGPATH_W) 'parsePartition.c'; else $(CYGPATH_W) '$(srcdir)/parsePartition.c'; fi`

libpll_avx_pthreads_a-parsimony.o: parsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-parsimony.o -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-parsimony.Tpo -c -o libpll_avx_pthreads_a-parsimony.o `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-parsimony.Tpo $(DEPDIR)/libpll_avx_pthreads_a-parsimony.Po
#	source='parsimony.c' object='libpll_avx_pthreads_a-parsimony.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-parsimony.o `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c

libpll_avx_pthreads_a-parsimony.obj: parsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_a-parsimony.obj -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_a-parsimony.Tpo -c -o libpll_avx_pthreads_a-parsimony.obj `if test -f 'parsimony.c'; then $(CYGPATH_W) 'parsimony.c'; else $(CYGPATH_W) '$(srcdir)/parsimony.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_a-parsimony.Tpo $(DEPDIR)/libpll_avx_pthreads_a-parsimony.Po
#	source='parsimony.c' object='libpll_avx_pthreads_a-parsimony.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_a-parsimony.obj `if test -f 'parsimony.c'; then $(CYGPATH_W) 'parsimony.c'; else $(CYGPATH_W) '$(srcdir)/parsimony.c'; fi`

libpll_avx_a-avxLikelihood.o: avxLikelihood.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-avxLikelihood.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-avxLikelihood.Tpo -c -o libpll_avx_a-avxLikelihood.o `test -f 'avxLikelihood.c' || echo '$(srcdir)/'`avxLikelihood.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-avxLikelihood.Tpo $(DEPDIR)/libpll_avx_a-avxLikelihood.Po
#	source='avxLikelihood.c' object='libpll_avx_a-avxLikelihood.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-avxLikelihood.o `test -f 'avxLikelihood.c' || echo '$(srcdir)/'`avxLikelihood.c

libpll_avx_a-avxLikelihood.obj: avxLikelihood.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-avxLikelihood.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-avxLikelihood.Tpo -c -o libpll_avx_a-avxLikelihood.obj `if test -f 'avxLikelihood.c'; then $(CYGPATH_W) 'avxLikelihood.c'; else $(CYGPATH_W) '$(srcdir)/avxLikelihood.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-avxLikelihood.Tpo $(DEPDIR)/libpll_avx_a-avxLikelihood.Po
#	source='avxLikelihood.c' object='libpll_avx_a-avxLikelihood.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-avxLikelihood.obj `if test -f 'avxLikelihood.c'; then $(CYGPATH_W) 'avxLikelihood.c'; else $(CYGPATH_W) '$(srcdir)/avxLikelihood.c'; fi`

libpll_avx_a-hash.o: hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-hash.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-hash.Tpo -c -o libpll_avx_a-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-hash.Tpo $(DEPDIR)/libpll_avx_a-hash.Po
#	source='hash.c' object='libpll_avx_a-hash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libpll_avx_a-hash.obj: hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-hash.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-hash.Tpo -c -o libpll_avx_a-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-hash.Tpo $(DEPDIR)/libpll_avx_a-hash.Po
#	source='hash.c' object='libpll_avx_a-hash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`

libpll_avx_a-stack.o: stack.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-stack.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-stack.Tpo -c -o libpll_avx_a-stack.o `test -f 'stack.c' || echo '$(srcdir)/'`stack.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-stack.Tpo $(DEPDIR)/libpll_avx_a-stack.Po
#	source='stack.c' object='libpll_avx_a-stack.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-stack.o `test -f 'stack.c' || echo '$(srcdir)/'`stack.c

libpll_avx_a-stack.obj: stack.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-stack.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-stack.Tpo -c -o libpll_avx_a-stack.obj `if test -f 'stack.c'; then $(CYGPATH_W) 'stack.c'; else $(CYGPATH_W) '$(srcdir)/stack.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-stack.Tpo $(DEPDIR)/libpll_avx_a-stack.Po
#	source='stack.c' object='libpll_avx_a-stack.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-stack.obj `if test -f 'stack.c'; then $(CYGPATH_W) 'stack.c'; else $(CYGPATH_W) '$(srcdir)/stack.c'; fi`

libpll_avx_a-ssort.o: ssort.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-ssort.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-ssort.Tpo -c -o libpll_avx_a-ssort.o `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-ssort.Tpo $(DEPDIR)/libpll_avx_a-ssort.Po
#	source='ssort.c' object='libpll_avx_a-ssort.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-ssort.o `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c

libpll_avx_a-ssort.obj: ssort.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-ssort.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-ssort.Tpo -c -o libpll_avx_a-ssort.obj `if test -f 'ssort.c'; then $(CYGPATH_W) 'ssort.c'; else $(CYGPATH_W) '$(srcdir)/ssort.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-ssort.Tpo $(DEPDIR)/libpll_avx_a-ssort.Po
#	source='ssort.c' object='libpll_avx_a-ssort.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-ssort.obj `if test -f 'ssort.c'; then $(CYGPATH_W) 'ssort.c'; else $(CYGPATH_W) '$(srcdir)/ssort.c'; fi`

libpll_avx_a-queue.o: queue.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-queue.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-queue.Tpo -c -o libpll_avx_a-queue.o `test -f 'queue.c' || echo '$(srcdir)/'`queue.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-queue.Tpo $(DEPDIR)/libpll_avx_a-queue.Po
#	source='queue.c' object='libpll_avx_a-queue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-queue.o `test -f 'queue.c' || echo '$(srcdir)/'`queue.c

libpll_avx_a-queue.obj: queue.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-queue.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-queue.Tpo -c -o libpll_avx_a-queue.obj `if test -f 'queue.c'; then $(CYGPATH_W) 'queue.c'; else $(CYGPATH_W) '$(srcdir)/queue.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-queue.Tpo $(DEPDIR)/libpll_avx_a-queue.Po
#	source='queue.c' object='libpll_avx_a-queue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-queue.obj `if test -f 'queue.c'; then $(CYGPATH_W) 'queue.c'; else $(CYGPATH_W) '$(srcdir)/queue.c'; fi`

libpll_avx_a-utils.o: utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-utils.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-utils.Tpo -c -o libpll_avx_a-utils.o `test -f 'utils.c' || echo '$(srcdir)/'`utils.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-utils.Tpo $(DEPDIR)/libpll_avx_a-utils.Po
#	source='utils.c' object='libpll_avx_a-utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-utils.o `test -f 'utils.c' || echo '$(srcdir)/'`utils.c

libpll_avx_a-utils.obj: utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-utils.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-utils.Tpo -c -o libpll_avx_a-utils.obj `if test -f 'utils.c'; then $(CYGPATH_W) 'utils.c'; else $(CYGPATH_W) '$(srcdir)/utils.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-utils.Tpo $(DEPDIR)/libpll_avx_a-utils.Po
#	source='utils.c' object='libpll_avx_a-utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-utils.obj `if test -f 'utils.c'; then $(CYGPATH_W) 'utils.c'; else $(CYGPATH_W) '$(srcdir)/utils.c'; fi`

libpll_avx_a-randomTree.o: randomTree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-randomTree.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-randomTree.Tpo -c -o libpll_avx_a-randomTree.o `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-randomTree.Tpo $(DEPDIR)/libpll_avx_a-randomTree.Po
#	source='randomTree.c' object='libpll_avx_a-randomTree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-randomTree.o `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c

libpll_avx_a-randomTree.obj: randomTree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-randomTree.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-randomTree.Tpo -c -o libpll_avx_a-randomTree.obj `if test -f 'randomTree.c'; then $(CYGPATH_W) 'randomTree.c'; else $(CYGPATH_W) '$(srcdir)/randomTree.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-randomTree.Tpo $(DEPDIR)/libpll_avx_a-randomTree.Po
#	source='randomTree.c' object='libpll_avx_a-randomTree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-randomTree.obj `if test -f 'randomTree.c'; then $(CYGPATH_W) 'randomTree.c'; else $(CYGPATH_W) '$(srcdir)/randomTree.c'; fi`

libpll_avx_a-optimizeModel.o: optimizeModel.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-optimizeModel.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-optimizeModel.Tpo -c -o libpll_avx_a-optimizeModel.o `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-optimizeModel.Tpo $(DEPDIR)/libpll_avx_a-optimizeModel.Po
#	source='optimizeModel.c' object='libpll_avx_a-optimizeModel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-optimizeModel.o `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c

libpll_avx_a-optimizeModel.obj: optimizeModel.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-optimizeModel.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-optimizeModel.Tpo -c -o libpll_avx_a-optimizeModel.obj `if test -f 'optimizeModel.c'; then $(CYGPATH_W) 'optimizeModel.c'; else $(CYGPATH_W) '$(srcdir)/optimizeModel.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-optimizeModel.Tpo $(DEPDIR)/libpll_avx_a-optimizeModel.Po
#	source='optimizeModel.c' object='libpll_avx_a-optimizeModel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-optimizeModel.obj `if test -f 'optimizeModel.c'; then $(CYGPATH_W) 'optimizeModel.c'; else $(CYGPATH_W) '$(srcdir)/optimizeModel.c'; fi`

libpll_avx_a-trash.o: trash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-trash.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-trash.Tpo -c -o libpll_avx_a-trash.o `test -f 'trash.c' || echo '$(srcdir)/'`trash.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-trash.Tpo $(DEPDIR)/libpll_avx_a-trash.Po
#	source='trash.c' object='libpll_avx_a-trash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-trash.o `test -f 'trash.c' || echo '$(srcdir)/'`trash.c

libpll_avx_a-trash.obj: trash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-trash.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-trash.Tpo -c -o libpll_avx_a-trash.obj `if test -f 'trash.c'; then $(CYGPATH_W) 'trash.c'; else $(CYGPATH_W) '$(srcdir)/trash.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-trash.Tpo $(DEPDIR)/libpll_avx_a-trash.Po
#	source='trash.c' object='libpll_avx_a-trash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-trash.obj `if test -f 'trash.c'; then $(CYGPATH_W) 'trash.c'; else $(CYGPATH_W) '$(srcdir)/trash.c'; fi`

libpll_avx_a-searchAlgo.o: searchAlgo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-searchAlgo.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-searchAlgo.Tpo -c -o libpll_avx_a-searchAlgo.o `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-searchAlgo.Tpo $(DEPDIR)/libpll_avx_a-searchAlgo.Po
#	source='searchAlgo.c' object='libpll_avx_a-searchAlgo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-searchAlgo.o `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c

libpll_avx_a-searchAlgo.obj: searchAlgo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-searchAlgo.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-searchAlgo.Tpo -c -o libpll_avx_a-searchAlgo.obj `if test -f 'searchAlgo.c'; then $(CYGPATH_W) 'searchAlgo.c'; else $(CYGPATH_W) '$(srcdir)/searchAlgo.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-searchAlgo.Tpo $(DEPDIR)/libpll_avx_a-searchAlgo.Po
#	source='searchAlgo.c' object='libpll_avx_a-searchAlgo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-searchAlgo.obj `if test -f 'searchAlgo.c'; then $(CYGPATH_W) 'searchAlgo.c'; else $(CYGPATH_W) '$(srcdir)/searchAlgo.c'; fi`

libpll_avx_a-topologies.o: topologies.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-topologies.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-topologies.Tpo -c -o libpll_avx_a-topologies.o `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-topologies.Tpo $(DEPDIR)/libpll_avx_a-topologies.Po
#	source='topologies.c' object='libpll_avx_a-topologies.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-topologies.o `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c

libpll_avx_a-topologies.obj: topologies.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-topologies.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-topologies.Tpo -c -o libpll_avx_a-topologies.obj `if test -f 'topologies.c'; then $(CYGPATH_W) 'topologies.c'; else $(CYGPATH_W) '$(srcdir)/topologies.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-topologies.Tpo $(DEPDIR)/libpll_avx_a-topologies.Po
#	source='topologies.c' object='libpll_avx_a-topologies.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-topologies.obj `if test -f 'topologies.c'; then $(CYGPATH_W) 'topologies.c'; else $(CYGPATH_W) '$(srcdir)/topologies.c'; fi`

libpll_avx_a-fastDNAparsimony.o: fastDNAparsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-fastDNAparsimony.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-fastDNAparsimony.Tpo -c -o libpll_avx_a-fastDNAparsimony.o `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-fastDNAparsimony.Tpo $(DEPDIR)/libpll_avx_a-fastDNAparsimony.Po
#	source='fastDNAparsimony.c' object='libpll_avx_a-fastDNAparsimony.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-fastDNAparsimony.o `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c

libpll_avx_a-fastDNAparsimony.obj: fastDNAparsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-fastDNAparsimony.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-fastDNAparsimony.Tpo -c -o libpll_avx_a-fastDNAparsimony.obj `if test -f 'fastDNAparsimony.c'; then $(CYGPATH_W) 'fastDNAparsimony.c'; else $(CYGPATH_W) '$(srcdir)/fastDNAparsimony.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-fastDNAparsimony.Tpo $(DEPDIR)/libpll_avx_a-fastDNAparsimony.Po
#	source='fastDNAparsimony.c' object='libpll_avx_a-fastDNAparsimony.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-fastDNAparsimony.obj `if test -f 'fastDNAparsimony.c'; then $(CYGPATH_W) 'fastDNAparsimony.c'; else $(CYGPATH_W) '$(srcdir)/fastDNAparsimony.c'; fi`

libpll_avx_a-treeIO.o: treeIO.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-treeIO.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-treeIO.Tpo -c -o libpll_avx_a-treeIO.o `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-treeIO.Tpo $(DEPDIR)/libpll_avx_a-treeIO.Po
#	source='treeIO.c' object='libpll_avx_a-treeIO.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-treeIO.o `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c

libpll_avx_a-treeIO.obj: treeIO.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-treeIO.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-treeIO.Tpo -c -o libpll_avx_a-treeIO.obj `if test -f 'treeIO.c'; then $(CYGPATH_W) 'treeIO.c'; else $(CYGPATH_W) '$(srcdir)/treeIO.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-treeIO.Tpo $(DEPDIR)/libpll_avx_a-treeIO.Po
#	source='treeIO.c' object='libpll_avx_a-treeIO.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-treeIO.obj `if test -f 'treeIO.c'; then $(CYGPATH_W) 'treeIO.c'; else $(CYGPATH_W) '$(srcdir)/treeIO.c'; fi`

libpll_avx_a-models.o: models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-models.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-models.Tpo -c -o libpll_avx_a-models.o `test -f 'models.c' || echo '$(srcdir)/'`models.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-models.Tpo $(DEPDIR)/libpll_avx_a-models.Po
#	source='models.c' object='libpll_avx_a-models.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-models.o `test -f 'models.c' || echo '$(srcdir)/'`models.c

libpll_avx_a-models.obj: models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-models.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-models.Tpo -c -o libpll_avx_a-models.obj `if test -f 'models.c'; then $(CYGPATH_W) 'models.c'; else $(CYGPATH_W) '$(srcdir)/models.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-models.Tpo $(DEPDIR)/libpll_avx_a-models.Po
#	source='models.c' object='libpll_avx_a-models.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-models.obj `if test -f 'models.c'; then $(CYGPATH_W) 'models.c'; else $(CYGPATH_W) '$(srcdir)/models.c'; fi`

libpll_avx_a-evaluatePartialGenericSpecial.o: evaluatePartialGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-evaluatePartialGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-evaluatePartialGenericSpecial.Tpo -c -o libpll_avx_a-evaluatePartialGenericSpecial.o `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_avx_a-evaluatePartialGenericSpecial.Po
#	source='evaluatePartialGenericSpecial.c' object='libpll_avx_a-evaluatePartialGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-evaluatePartialGenericSpecial.o `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c

libpll_avx_a-evaluatePartialGenericSpecial.obj: evaluatePartialGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-evaluatePartialGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-evaluatePartialGenericSpecial.Tpo -c -o libpll_avx_a-evaluatePartialGenericSpecial.obj `if test -f 'evaluatePartialGenericSpecial.c'; then $(CYGPATH_W) 'evaluatePartialGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluatePartialGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_avx_a-evaluatePartialGenericSpecial.Po
#	source='evaluatePartialGenericSpecial.c' object='libpll_avx_a-evaluatePartialGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-evaluatePartialGenericSpecial.obj `if test -f 'evaluatePartialGenericSpecial.c'; then $(CYGPATH_W) 'evaluatePartialGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluatePartialGenericSpecial.c'; fi`

libpll_avx_a-evaluateGenericSpecial.o: evaluateGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-evaluateGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-evaluateGenericSpecial.Tpo -c -o libpll_avx_a-evaluateGenericSpecial.o `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_avx_a-evaluateGenericSpecial.Po
#	source='evaluateGenericSpecial.c' object='libpll_avx_a-evaluateGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-evaluateGenericSpecial.o `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c

libpll_avx_a-evaluateGenericSpecial.obj: evaluateGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-evaluateGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-evaluateGenericSpecial.Tpo -c -o libpll_avx_a-evaluateGenericSpecial.obj `if test -f 'evaluateGenericSpecial.c'; then $(CYGPATH_W) 'evaluateGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluateGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_avx_a-evaluateGenericSpecial.Po
#	source='evaluateGenericSpecial.c' object='libpll_avx_a-evaluateGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-evaluateGenericSpecial.obj `if test -f 'evaluateGenericSpecial.c'; then $(CYGPATH_W) 'evaluateGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluateGenericSpecial.c'; fi`

libpll_avx_a-newviewGenericSpecial.o: newviewGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-newviewGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-newviewGenericSpecial.Tpo -c -o libpll_avx_a-newviewGenericSpecial.o `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_avx_a-newviewGenericSpecial.Po
#	source='newviewGenericSpecial.c' object='libpll_avx_a-newviewGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-newviewGenericSpecial.o `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c

libpll_avx_a-newviewGenericSpecial.obj: newviewGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-newviewGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-newviewGenericSpecial.Tpo -c -o libpll_avx_a-newviewGenericSpecial.obj `if test -f 'newviewGenericSpecial.c'; then $(CYGPATH_W) 'newviewGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/newviewGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_avx_a-newviewGenericSpecial.Po
#	source='newviewGenericSpecial.c' object='libpll_avx_a-newviewGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-newviewGenericSpecial.obj `if test -f 'newviewGenericSpecial.c'; then $(CYGPATH_W) 'newviewGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/newviewGenericSpecial.c'; fi`

libpll_avx_a-makenewzGenericSpecial.o: makenewzGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-makenewzGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-makenewzGenericSpecial.Tpo -c -o libpll_avx_a-makenewzGenericSpecial.o `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_avx_a-makenewzGenericSpecial.Po
#	source='makenewzGenericSpecial.c' object='libpll_avx_a-makenewzGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-makenewzGenericSpecial.o `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c

libpll_avx_a-makenewzGenericSpecial.obj: makenewzGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-makenewzGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-makenewzGenericSpecial.Tpo -c -o libpll_avx_a-makenewzGenericSpecial.obj `if test -f 'makenewzGenericSpecial.c'; then $(CYGPATH_W) 'makenewzGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/makenewzGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_avx_a-makenewzGenericSpecial.Po
#	source='makenewzGenericSpecial.c' object='libpll_avx_a-makenewzGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-makenewzGenericSpecial.obj `if test -f 'makenewzGenericSpecial.c'; then $(CYGPATH_W) 'makenewzGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/makenewzGenericSpecial.c'; fi`

libpll_avx_a-bipartitionList.o: bipartitionList.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-bipartitionList.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-bipartitionList.Tpo -c -o libpll_avx_a-bipartitionList.o `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-bipartitionList.Tpo $(DEPDIR)/libpll_avx_a-bipartitionList.Po
#	source='bipartitionList.c' object='libpll_avx_a-bipartitionList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-bipartitionList.o `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c

libpll_avx_a-bipartitionList.obj: bipartitionList.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-bipartitionList.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-bipartitionList.Tpo -c -o libpll_avx_a-bipartitionList.obj `if test -f 'bipartitionList.c'; then $(CYGPATH_W) 'bipartitionList.c'; else $(CYGPATH_W) '$(srcdir)/bipartitionList.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-bipartitionList.Tpo $(DEPDIR)/libpll_avx_a-bipartitionList.Po
#	source='bipartitionList.c' object='libpll_avx_a-bipartitionList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-bipartitionList.obj `if test -f 'bipartitionList.c'; then $(CYGPATH_W) 'bipartitionList.c'; else $(CYGPATH_W) '$(srcdir)/bipartitionList.c'; fi`

libpll_avx_a-restartHashTable.o: restartHashTable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-restartHashTable.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-restartHashTable.Tpo -c -o libpll_avx_a-restartHashTable.o `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-restartHashTable.Tpo $(DEPDIR)/libpll_avx_a-restartHashTable.Po
#	source='restartHashTable.c' object='libpll_avx_a-restartHashTable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-restartHashTable.o `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c

libpll_avx_a-restartHashTable.obj: restartHashTable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-restartHashTable.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-restartHashTable.Tpo -c -o libpll_avx_a-restartHashTable.obj `if test -f 'restartHashTable.c'; then $(CYGPATH_W) 'restartHashTable.c'; else $(CYGPATH_W) '$(srcdir)/restartHashTable.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-restartHashTable.Tpo $(DEPDIR)/libpll_avx_a-restartHashTable.Po
#	source='restartHashTable.c' object='libpll_avx_a-restartHashTable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-restartHashTable.obj `if test -f 'restartHashTable.c'; then $(CYGPATH_W) 'restartHashTable.c'; else $(CYGPATH_W) '$(srcdir)/restartHashTable.c'; fi`

libpll_avx_a-recom.o: recom.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-recom.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-recom.Tpo -c -o libpll_avx_a-recom.o `test -f 'recom.c' || echo '$(srcdir)/'`recom.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-recom.Tpo $(DEPDIR)/libpll_avx_a-recom.Po
#	source='recom.c' object='libpll_avx_a-recom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-recom.o `test -f 'recom.c' || echo '$(srcdir)/'`recom.c

libpll_avx_a-recom.obj: recom.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-recom.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-recom.Tpo -c -o libpll_avx_a-recom.obj `if test -f 'recom.c'; then $(CYGPATH_W) 'recom.c'; else $(CYGPATH_W) '$(srcdir)/recom.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-recom.Tpo $(DEPDIR)/libpll_avx_a-recom.Po
#	source='recom.c' object='libpll_avx_a-recom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-recom.obj `if test -f 'recom.c'; then $(CYGPATH_W) 'recom.c'; else $(CYGPATH_W) '$(srcdir)/recom.c'; fi`

libpll_avx_a-lexer.o: lexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-lexer.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-lexer.Tpo -c -o libpll_avx_a-lexer.o `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-lexer.Tpo $(DEPDIR)/libpll_avx_a-lexer.Po
#	source='lexer.c' object='libpll_avx_a-lexer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-lexer.o `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c

libpll_avx_a-lexer.obj: lexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-lexer.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-lexer.Tpo -c -o libpll_avx_a-lexer.obj `if test -f 'lexer.c'; then $(CYGPATH_W) 'lexer.c'; else $(CYGPATH_W) '$(srcdir)/lexer.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-lexer.Tpo $(DEPDIR)/libpll_avx_a-lexer.Po
#	source='lexer.c' object='libpll_avx_a-lexer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-lexer.obj `if test -f 'lexer.c'; then $(CYGPATH_W) 'lexer.c'; else $(CYGPATH_W) '$(srcdir)/lexer.c'; fi`

libpll_avx_a-alignment.o: alignment.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-alignment.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-alignment.Tpo -c -o libpll_avx_a-alignment.o `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-alignment.Tpo $(DEPDIR)/libpll_avx_a-alignment.Po
#	source='alignment.c' object='libpll_avx_a-alignment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-alignment.o `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c

libpll_avx_a-alignment.obj: alignment.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-alignment.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-alignment.Tpo -c -o libpll_avx_a-alignment.obj `if test -f 'alignment.c'; then $(CYGPATH_W) 'alignment.c'; else $(CYGPATH_W) '$(srcdir)/alignment.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-alignment.Tpo $(DEPDIR)/libpll_avx_a-alignment.Po
#	source='alignment.c' object='libpll_avx_a-alignment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-alignment.obj `if test -f 'alignment.c'; then $(CYGPATH_W) 'alignment.c'; else $(CYGPATH_W) '$(srcdir)/alignment.c'; fi`

libpll_avx_a-newick.o: newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-newick.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-newick.Tpo -c -o libpll_avx_a-newick.o `test -f 'newick.c' || echo '$(srcdir)/'`newick.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-newick.Tpo $(DEPDIR)/libpll_avx_a-newick.Po
#	source='newick.c' object='libpll_avx_a-newick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-newick.o `test -f 'newick.c' || echo '$(srcdir)/'`newick.c

libpll_avx_a-newick.obj: newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-newick.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-newick.Tpo -c -o libpll_avx_a-newick.obj `if test -f 'newick.c'; then $(CYGPATH_W) 'newick.c'; else $(CYGPATH_W) '$(srcdir)/newick.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-newick.Tpo $(DEPDIR)/libpll_avx_a-newick.Po
#	source='newick.c' object='libpll_avx_a-newick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-newick.obj `if test -f 'newick.c'; then $(CYGPATH_W) 'newick.c'; else $(CYGPATH_W) '$(srcdir)/newick.c'; fi`

libpll_avx_a-parsePartition.o: parsePartition.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-parsePartition.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-parsePartition.Tpo -c -o libpll_avx_a-parsePartition.o `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-parsePartition.Tpo $(DEPDIR)/libpll_avx_a-parsePartition.Po
#	source='parsePartition.c' object='libpll_avx_a-parsePartition.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-parsePartition.o `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c

libpll_avx_a-parsePartition.obj: parsePartition.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-parsePartition.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-parsePartition.Tpo -c -o libpll_avx_a-parsePartition.obj `if test -f 'parsePartition.c'; then $(CYGPATH_W) 'parsePartition.c'; else $(CYGPATH_W) '$(srcdir)/parsePartition.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-parsePartition.Tpo $(DEPDIR)/libpll_avx_a-parsePartition.Po
#	source='parsePartition.c' object='libpll_avx_a-parsePartition.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-parsePartition.obj `if test -f 'parsePartition.c'; then $(CYGPATH_W) 'parsePartition.c'; else $(CYGPATH_W) '$(srcdir)/parsePartition.c'; fi`

libpll_avx_a-parsimony.o: parsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-parsimony.o -MD -MP -MF $(DEPDIR)/libpll_avx_a-parsimony.Tpo -c -o libpll_avx_a-parsimony.o `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c
	$(am__mv) $(DEPDIR)/libpll_avx_a-parsimony.Tpo $(DEPDIR)/libpll_avx_a-parsimony.Po
#	source='parsimony.c' object='libpll_avx_a-parsimony.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-parsimony.o `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c

libpll_avx_a-parsimony.obj: parsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -MT libpll_avx_a-parsimony.obj -MD -MP -MF $(DEPDIR)/libpll_avx_a-parsimony.Tpo -c -o libpll_avx_a-parsimony.obj `if test -f 'parsimony.c'; then $(CYGPATH_W) 'parsimony.c'; else $(CYGPATH_W) '$(srcdir)/parsimony.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_avx_a-parsimony.Tpo $(DEPDIR)/libpll_avx_a-parsimony.Po
#	source='parsimony.c' object='libpll_avx_a-parsimony.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_a_CFLAGS) $(CFLAGS) -c -o libpll_avx_a-parsimony.obj `if test -f 'parsimony.c'; then $(CYGPATH_W) 'parsimony.c'; else $(CYGPATH_W) '$(srcdir)/parsimony.c'; fi`

libpll_sse3_pthreads_a-genericParallelization.o: genericParallelization.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-genericParallelization.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-genericParallelization.Tpo -c -o libpll_sse3_pthreads_a-genericParallelization.o `test -f 'genericParallelization.c' || echo '$(srcdir)/'`genericParallelization.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-genericParallelization.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-genericParallelization.Po
#	source='genericParallelization.c' object='libpll_sse3_pthreads_a-genericParallelization.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-genericParallelization.o `test -f 'genericParallelization.c' || echo '$(srcdir)/'`genericParallelization.c

libpll_sse3_pthreads_a-genericParallelization.obj: genericParallelization.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-genericParallelization.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-genericParallelization.Tpo -c -o libpll_sse3_pthreads_a-genericParallelization.obj `if test -f 'genericParallelization.c'; then $(CYGPATH_W) 'genericParallelization.c'; else $(CYGPATH_W) '$(srcdir)/genericParallelization.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-genericParallelization.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-genericParallelization.Po
#	source='genericParallelization.c' object='libpll_sse3_pthreads_a-genericParallelization.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-genericParallelization.obj `if test -f 'genericParallelization.c'; then $(CYGPATH_W) 'genericParallelization.c'; else $(CYGPATH_W) '$(srcdir)/genericParallelization.c'; fi`

libpll_sse3_pthreads_a-hash.o: hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-hash.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-hash.Tpo -c -o libpll_sse3_pthreads_a-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-hash.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-hash.Po
#	source='hash.c' object='libpll_sse3_pthreads_a-hash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libpll_sse3_pthreads_a-hash.obj: hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-hash.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-hash.Tpo -c -o libpll_sse3_pthreads_a-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-hash.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-hash.Po
#	source='hash.c' object='libpll_sse3_pthreads_a-hash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`

libpll_sse3_pthreads_a-stack.o: stack.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-stack.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-stack.Tpo -c -o libpll_sse3_pthreads_a-stack.o `test -f 'stack.c' || echo '$(srcdir)/'`stack.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-stack.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-stack.Po
#	source='stack.c' object='libpll_sse3_pthreads_a-stack.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-stack.o `test -f 'stack.c' || echo '$(srcdir)/'`stack.c

libpll_sse3_pthreads_a-stack.obj: stack.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-stack.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-stack.Tpo -c -o libpll_sse3_pthreads_a-stack.obj `if test -f 'stack.c'; then $(CYGPATH_W) 'stack.c'; else $(CYGPATH_W) '$(srcdir)/stack.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-stack.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-stack.Po
#	source='stack.c' object='libpll_sse3_pthreads_a-stack.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-stack.obj `if test -f 'stack.c'; then $(CYGPATH_W) 'stack.c'; else $(CYGPATH_W) '$(srcdir)/stack.c'; fi`

libpll_sse3_pthreads_a-ssort.o: ssort.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-ssort.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-ssort.Tpo -c -o libpll_sse3_pthreads_a-ssort.o `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-ssort.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-ssort.Po
#	source='ssort.c' object='libpll_sse3_pthreads_a-ssort.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-ssort.o `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c

libpll_sse3_pthreads_a-ssort.obj: ssort.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-ssort.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-ssort.Tpo -c -o libpll_sse3_pthreads_a-ssort.obj `if test -f 'ssort.c'; then $(CYGPATH_W) 'ssort.c'; else $(CYGPATH_W) '$(srcdir)/ssort.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-ssort.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-ssort.Po
#	source='ssort.c' object='libpll_sse3_pthreads_a-ssort.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-ssort.obj `if test -f 'ssort.c'; then $(CYGPATH_W) 'ssort.c'; else $(CYGPATH_W) '$(srcdir)/ssort.c'; fi`

libpll_sse3_pthreads_a-queue.o: queue.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-queue.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-queue.Tpo -c -o libpll_sse3_pthreads_a-queue.o `test -f 'queue.c' || echo '$(srcdir)/'`queue.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-queue.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-queue.Po
#	source='queue.c' object='libpll_sse3_pthreads_a-queue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-queue.o `test -f 'queue.c' || echo '$(srcdir)/'`queue.c

libpll_sse3_pthreads_a-queue.obj: queue.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-queue.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-queue.Tpo -c -o libpll_sse3_pthreads_a-queue.obj `if test -f 'queue.c'; then $(CYGPATH_W) 'queue.c'; else $(CYGPATH_W) '$(srcdir)/queue.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-queue.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-queue.Po
#	source='queue.c' object='libpll_sse3_pthreads_a-queue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-queue.obj `if test -f 'queue.c'; then $(CYGPATH_W) 'queue.c'; else $(CYGPATH_W) '$(srcdir)/queue.c'; fi`

libpll_sse3_pthreads_a-utils.o: utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-utils.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-utils.Tpo -c -o libpll_sse3_pthreads_a-utils.o `test -f 'utils.c' || echo '$(srcdir)/'`utils.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-utils.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-utils.Po
#	source='utils.c' object='libpll_sse3_pthreads_a-utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-utils.o `test -f 'utils.c' || echo '$(srcdir)/'`utils.c

libpll_sse3_pthreads_a-utils.obj: utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-utils.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-utils.Tpo -c -o libpll_sse3_pthreads_a-utils.obj `if test -f 'utils.c'; then $(CYGPATH_W) 'utils.c'; else $(CYGPATH_W) '$(srcdir)/utils.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-utils.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-utils.Po
#	source='utils.c' object='libpll_sse3_pthreads_a-utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-utils.obj `if test -f 'utils.c'; then $(CYGPATH_W) 'utils.c'; else $(CYGPATH_W) '$(srcdir)/utils.c'; fi`

libpll_sse3_pthreads_a-randomTree.o: randomTree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-randomTree.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-randomTree.Tpo -c -o libpll_sse3_pthreads_a-randomTree.o `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-randomTree.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-randomTree.Po
#	source='randomTree.c' object='libpll_sse3_pthreads_a-randomTree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-randomTree.o `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c

libpll_sse3_pthreads_a-randomTree.obj: randomTree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-randomTree.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-randomTree.Tpo -c -o libpll_sse3_pthreads_a-randomTree.obj `if test -f 'randomTree.c'; then $(CYGPATH_W) 'randomTree.c'; else $(CYGPATH_W) '$(srcdir)/randomTree.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-randomTree.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-randomTree.Po
#	source='randomTree.c' object='libpll_sse3_pthreads_a-randomTree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-randomTree.obj `if test -f 'randomTree.c'; then $(CYGPATH_W) 'randomTree.c'; else $(CYGPATH_W) '$(srcdir)/randomTree.c'; fi`

libpll_sse3_pthreads_a-optimizeModel.o: optimizeModel.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-optimizeModel.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-optimizeModel.Tpo -c -o libpll_sse3_pthreads_a-optimizeModel.o `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-optimizeModel.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-optimizeModel.Po
#	source='optimizeModel.c' object='libpll_sse3_pthreads_a-optimizeModel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-optimizeModel.o `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c

libpll_sse3_pthreads_a-optimizeModel.obj: optimizeModel.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-optimizeModel.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-optimizeModel.Tpo -c -o libpll_sse3_pthreads_a-optimizeModel.obj `if test -f 'optimizeModel.c'; then $(CYGPATH_W) 'optimizeModel.c'; else $(CYGPATH_W) '$(srcdir)/optimizeModel.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-optimizeModel.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-optimizeModel.Po
#	source='optimizeModel.c' object='libpll_sse3_pthreads_a-optimizeModel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-optimizeModel.obj `if test -f 'optimizeModel.c'; then $(CYGPATH_W) 'optimizeModel.c'; else $(CYGPATH_W) '$(srcdir)/optimizeModel.c'; fi`

libpll_sse3_pthreads_a-trash.o: trash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-trash.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-trash.Tpo -c -o libpll_sse3_pthreads_a-trash.o `test -f 'trash.c' || echo '$(srcdir)/'`trash.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-trash.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-trash.Po
#	source='trash.c' object='libpll_sse3_pthreads_a-trash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-trash.o `test -f 'trash.c' || echo '$(srcdir)/'`trash.c

libpll_sse3_pthreads_a-trash.obj: trash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-trash.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-trash.Tpo -c -o libpll_sse3_pthreads_a-trash.obj `if test -f 'trash.c'; then $(CYGPATH_W) 'trash.c'; else $(CYGPATH_W) '$(srcdir)/trash.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-trash.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-trash.Po
#	source='trash.c' object='libpll_sse3_pthreads_a-trash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-trash.obj `if test -f 'trash.c'; then $(CYGPATH_W) 'trash.c'; else $(CYGPATH_W) '$(srcdir)/trash.c'; fi`

libpll_sse3_pthreads_a-searchAlgo.o: searchAlgo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-searchAlgo.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-searchAlgo.Tpo -c -o libpll_sse3_pthreads_a-searchAlgo.o `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-searchAlgo.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-searchAlgo.Po
#	source='searchAlgo.c' object='libpll_sse3_pthreads_a-searchAlgo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-searchAlgo.o `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c

libpll_sse3_pthreads_a-searchAlgo.obj: searchAlgo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-searchAlgo.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-searchAlgo.Tpo -c -o libpll_sse3_pthreads_a-searchAlgo.obj `if test -f 'searchAlgo.c'; then $(CYGPATH_W) 'searchAlgo.c'; else $(CYGPATH_W) '$(srcdir)/searchAlgo.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-searchAlgo.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-searchAlgo.Po
#	source='searchAlgo.c' object='libpll_sse3_pthreads_a-searchAlgo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-searchAlgo.obj `if test -f 'searchAlgo.c'; then $(CYGPATH_W) 'searchAlgo.c'; else $(CYGPATH_W) '$(srcdir)/searchAlgo.c'; fi`

libpll_sse3_pthreads_a-topologies.o: topologies.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-topologies.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-topologies.Tpo -c -o libpll_sse3_pthreads_a-topologies.o `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-topologies.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-topologies.Po
#	source='topologies.c' object='libpll_sse3_pthreads_a-topologies.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-topologies.o `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c

libpll_sse3_pthreads_a-topologies.obj: topologies.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-topologies.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-topologies.Tpo -c -o libpll_sse3_pthreads_a-topologies.obj `if test -f 'topologies.c'; then $(CYGPATH_W) 'topologies.c'; else $(CYGPATH_W) '$(srcdir)/topologies.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-topologies.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-topologies.Po
#	source='topologies.c' object='libpll_sse3_pthreads_a-topologies.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-topologies.obj `if test -f 'topologies.c'; then $(CYGPATH_W) 'topologies.c'; else $(CYGPATH_W) '$(srcdir)/topologies.c'; fi`

libpll_sse3_pthreads_a-fastDNAparsimony.o: fastDNAparsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-fastDNAparsimony.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-fastDNAparsimony.Tpo -c -o libpll_sse3_pthreads_a-fastDNAparsimony.o `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-fastDNAparsimony.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-fastDNAparsimony.Po
#	source='fastDNAparsimony.c' object='libpll_sse3_pthreads_a-fastDNAparsimony.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-fastDNAparsimony.o `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c

libpll_sse3_pthreads_a-fastDNAparsimony.obj: fastDNAparsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-fastDNAparsimony.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-fastDNAparsimony.Tpo -c -o libpll_sse3_pthreads_a-fastDNAparsimony.obj `if test -f 'fastDNAparsimony.c'; then $(CYGPATH_W) 'fastDNAparsimony.c'; else $(CYGPATH_W) '$(srcdir)/fastDNAparsimony.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-fastDNAparsimony.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-fastDNAparsimony.Po
#	source='fastDNAparsimony.c' object='libpll_sse3_pthreads_a-fastDNAparsimony.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-fastDNAparsimony.obj `if test -f 'fastDNAparsimony.c'; then $(CYGPATH_W) 'fastDNAparsimony.c'; else $(CYGPATH_W) '$(srcdir)/fastDNAparsimony.c'; fi`

libpll_sse3_pthreads_a-treeIO.o: treeIO.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-treeIO.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-treeIO.Tpo -c -o libpll_sse3_pthreads_a-treeIO.o `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-treeIO.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-treeIO.Po
#	source='treeIO.c' object='libpll_sse3_pthreads_a-treeIO.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-treeIO.o `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c

libpll_sse3_pthreads_a-treeIO.obj: treeIO.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-treeIO.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-treeIO.Tpo -c -o libpll_sse3_pthreads_a-treeIO.obj `if test -f 'treeIO.c'; then $(CYGPATH_W) 'treeIO.c'; else $(CYGPATH_W) '$(srcdir)/treeIO.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-treeIO.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-treeIO.Po
#	source='treeIO.c' object='libpll_sse3_pthreads_a-treeIO.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-treeIO.obj `if test -f 'treeIO.c'; then $(CYGPATH_W) 'treeIO.c'; else $(CYGPATH_W) '$(srcdir)/treeIO.c'; fi`

libpll_sse3_pthreads_a-models.o: models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-models.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-models.Tpo -c -o libpll_sse3_pthreads_a-models.o `test -f 'models.c' || echo '$(srcdir)/'`models.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-models.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-models.Po
#	source='models.c' object='libpll_sse3_pthreads_a-models.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-models.o `test -f 'models.c' || echo '$(srcdir)/'`models.c

libpll_sse3_pthreads_a-models.obj: models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-models.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-models.Tpo -c -o libpll_sse3_pthreads_a-models.obj `if test -f 'models.c'; then $(CYGPATH_W) 'models.c'; else $(CYGPATH_W) '$(srcdir)/models.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-models.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-models.Po
#	source='models.c' object='libpll_sse3_pthreads_a-models.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-models.obj `if test -f 'models.c'; then $(CYGPATH_W) 'models.c'; else $(CYGPATH_W) '$(srcdir)/models.c'; fi`

libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.o: evaluatePartialGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.Tpo -c -o libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.o `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.Po
#	source='evaluatePartialGenericSpecial.c' object='libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.o `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c

libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.obj: evaluatePartialGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.Tpo -c -o libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.obj `if test -f 'evaluatePartialGenericSpecial.c'; then $(CYGPATH_W) 'evaluatePartialGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluatePartialGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.Po
#	source='evaluatePartialGenericSpecial.c' object='libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-evaluatePartialGenericSpecial.obj `if test -f 'evaluatePartialGenericSpecial.c'; then $(CYGPATH_W) 'evaluatePartialGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluatePartialGenericSpecial.c'; fi`

libpll_sse3_pthreads_a-evaluateGenericSpecial.o: evaluateGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-evaluateGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-evaluateGenericSpecial.Tpo -c -o libpll_sse3_pthreads_a-evaluateGenericSpecial.o `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-evaluateGenericSpecial.Po
#	source='evaluateGenericSpecial.c' object='libpll_sse3_pthreads_a-evaluateGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-evaluateGenericSpecial.o `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c

libpll_sse3_pthreads_a-evaluateGenericSpecial.obj: evaluateGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-evaluateGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-evaluateGenericSpecial.Tpo -c -o libpll_sse3_pthreads_a-evaluateGenericSpecial.obj `if test -f 'evaluateGenericSpecial.c'; then $(CYGPATH_W) 'evaluateGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluateGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-evaluateGenericSpecial.Po
#	source='evaluateGenericSpecial.c' object='libpll_sse3_pthreads_a-evaluateGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-evaluateGenericSpecial.obj `if test -f 'evaluateGenericSpecial.c'; then $(CYGPATH_W) 'evaluateGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluateGenericSpecial.c'; fi`

libpll_sse3_pthreads_a-newviewGenericSpecial.o: newviewGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-newviewGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-newviewGenericSpecial.Tpo -c -o libpll_sse3_pthreads_a-newviewGenericSpecial.o `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-newviewGenericSpecial.Po
#	source='newviewGenericSpecial.c' object='libpll_sse3_pthreads_a-newviewGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-newviewGenericSpecial.o `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c

libpll_sse3_pthreads_a-newviewGenericSpecial.obj: newviewGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-newviewGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-newviewGenericSpecial.Tpo -c -o libpll_sse3_pthreads_a-newviewGenericSpecial.obj `if test -f 'newviewGenericSpecial.c'; then $(CYGPATH_W) 'newviewGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/newviewGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-newviewGenericSpecial.Po
#	source='newviewGenericSpecial.c' object='libpll_sse3_pthreads_a-newviewGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-newviewGenericSpecial.obj `if test -f 'newviewGenericSpecial.c'; then $(CYGPATH_W) 'newviewGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/newviewGenericSpecial.c'; fi`

libpll_sse3_pthreads_a-makenewzGenericSpecial.o: makenewzGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-makenewzGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-makenewzGenericSpecial.Tpo -c -o libpll_sse3_pthreads_a-makenewzGenericSpecial.o `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-makenewzGenericSpecial.Po
#	source='makenewzGenericSpecial.c' object='libpll_sse3_pthreads_a-makenewzGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-makenewzGenericSpecial.o `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c

libpll_sse3_pthreads_a-makenewzGenericSpecial.obj: makenewzGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-makenewzGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-makenewzGenericSpecial.Tpo -c -o libpll_sse3_pthreads_a-makenewzGenericSpecial.obj `if test -f 'makenewzGenericSpecial.c'; then $(CYGPATH_W) 'makenewzGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/makenewzGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-makenewzGenericSpecial.Po
#	source='makenewzGenericSpecial.c' object='libpll_sse3_pthreads_a-makenewzGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-makenewzGenericSpecial.obj `if test -f 'makenewzGenericSpecial.c'; then $(CYGPATH_W) 'makenewzGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/makenewzGenericSpecial.c'; fi`

libpll_sse3_pthreads_a-bipartitionList.o: bipartitionList.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-bipartitionList.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-bipartitionList.Tpo -c -o libpll_sse3_pthreads_a-bipartitionList.o `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-bipartitionList.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-bipartitionList.Po
#	source='bipartitionList.c' object='libpll_sse3_pthreads_a-bipartitionList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-bipartitionList.o `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c

libpll_sse3_pthreads_a-bipartitionList.obj: bipartitionList.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-bipartitionList.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-bipartitionList.Tpo -c -o libpll_sse3_pthreads_a-bipartitionList.obj `if test -f 'bipartitionList.c'; then $(CYGPATH_W) 'bipartitionList.c'; else $(CYGPATH_W) '$(srcdir)/bipartitionList.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-bipartitionList.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-bipartitionList.Po
#	source='bipartitionList.c' object='libpll_sse3_pthreads_a-bipartitionList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-bipartitionList.obj `if test -f 'bipartitionList.c'; then $(CYGPATH_W) 'bipartitionList.c'; else $(CYGPATH_W) '$(srcdir)/bipartitionList.c'; fi`

libpll_sse3_pthreads_a-restartHashTable.o: restartHashTable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-restartHashTable.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-restartHashTable.Tpo -c -o libpll_sse3_pthreads_a-restartHashTable.o `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-restartHashTable.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-restartHashTable.Po
#	source='restartHashTable.c' object='libpll_sse3_pthreads_a-restartHashTable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-restartHashTable.o `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c

libpll_sse3_pthreads_a-restartHashTable.obj: restartHashTable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-restartHashTable.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-restartHashTable.Tpo -c -o libpll_sse3_pthreads_a-restartHashTable.obj `if test -f 'restartHashTable.c'; then $(CYGPATH_W) 'restartHashTable.c'; else $(CYGPATH_W) '$(srcdir)/restartHashTable.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-restartHashTable.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-restartHashTable.Po
#	source='restartHashTable.c' object='libpll_sse3_pthreads_a-restartHashTable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-restartHashTable.obj `if test -f 'restartHashTable.c'; then $(CYGPATH_W) 'restartHashTable.c'; else $(CYGPATH_W) '$(srcdir)/restartHashTable.c'; fi`

libpll_sse3_pthreads_a-recom.o: recom.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-recom.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-recom.Tpo -c -o libpll_sse3_pthreads_a-recom.o `test -f 'recom.c' || echo '$(srcdir)/'`recom.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-recom.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-recom.Po
#	source='recom.c' object='libpll_sse3_pthreads_a-recom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-recom.o `test -f 'recom.c' || echo '$(srcdir)/'`recom.c

libpll_sse3_pthreads_a-recom.obj: recom.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-recom.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-recom.Tpo -c -o libpll_sse3_pthreads_a-recom.obj `if test -f 'recom.c'; then $(CYGPATH_W) 'recom.c'; else $(CYGPATH_W) '$(srcdir)/recom.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-recom.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-recom.Po
#	source='recom.c' object='libpll_sse3_pthreads_a-recom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-recom.obj `if test -f 'recom.c'; then $(CYGPATH_W) 'recom.c'; else $(CYGPATH_W) '$(srcdir)/recom.c'; fi`

libpll_sse3_pthreads_a-lexer.o: lexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-lexer.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-lexer.Tpo -c -o libpll_sse3_pthreads_a-lexer.o `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-lexer.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-lexer.Po
#	source='lexer.c' object='libpll_sse3_pthreads_a-lexer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-lexer.o `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c

libpll_sse3_pthreads_a-lexer.obj: lexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-lexer.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-lexer.Tpo -c -o libpll_sse3_pthreads_a-lexer.obj `if test -f 'lexer.c'; then $(CYGPATH_W) 'lexer.c'; else $(CYGPATH_W) '$(srcdir)/lexer.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-lexer.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-lexer.Po
#	source='lexer.c' object='libpll_sse3_pthreads_a-lexer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-lexer.obj `if test -f 'lexer.c'; then $(CYGPATH_W) 'lexer.c'; else $(CYGPATH_W) '$(srcdir)/lexer.c'; fi`

libpll_sse3_pthreads_a-alignment.o: alignment.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-alignment.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-alignment.Tpo -c -o libpll_sse3_pthreads_a-alignment.o `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-alignment.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-alignment.Po
#	source='alignment.c' object='libpll_sse3_pthreads_a-alignment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-alignment.o `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c

libpll_sse3_pthreads_a-alignment.obj: alignment.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-alignment.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-alignment.Tpo -c -o libpll_sse3_pthreads_a-alignment.obj `if test -f 'alignment.c'; then $(CYGPATH_W) 'alignment.c'; else $(CYGPATH_W) '$(srcdir)/alignment.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-alignment.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-alignment.Po
#	source='alignment.c' object='libpll_sse3_pthreads_a-alignment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-alignment.obj `if test -f 'alignment.c'; then $(CYGPATH_W) 'alignment.c'; else $(CYGPATH_W) '$(srcdir)/alignment.c'; fi`

libpll_sse3_pthreads_a-newick.o: newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-newick.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-newick.Tpo -c -o libpll_sse3_pthreads_a-newick.o `test -f 'newick.c' || echo '$(srcdir)/'`newick.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-newick.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-newick.Po
#	source='newick.c' object='libpll_sse3_pthreads_a-newick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-newick.o `test -f 'newick.c' || echo '$(srcdir)/'`newick.c

libpll_sse3_pthreads_a-newick.obj: newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-newick.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-newick.Tpo -c -o libpll_sse3_pthreads_a-newick.obj `if test -f 'newick.c'; then $(CYGPATH_W) 'newick.c'; else $(CYGPATH_W) '$(srcdir)/newick.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-newick.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-newick.Po
#	source='newick.c' object='libpll_sse3_pthreads_a-newick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-newick.obj `if test -f 'newick.c'; then $(CYGPATH_W) 'newick.c'; else $(CYGPATH_W) '$(srcdir)/newick.c'; fi`

libpll_sse3_pthreads_a-parsePartition.o: parsePartition.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-parsePartition.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-parsePartition.Tpo -c -o libpll_sse3_pthreads_a-parsePartition.o `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-parsePartition.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-parsePartition.Po
#	source='parsePartition.c' object='libpll_sse3_pthreads_a-parsePartition.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-parsePartition.o `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c

libpll_sse3_pthreads_a-parsePartition.obj: parsePartition.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-parsePartition.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-parsePartition.Tpo -c -o libpll_sse3_pthreads_a-parsePartition.obj `if test -f 'parsePartition.c'; then $(CYGPATH_W) 'parsePartition.c'; else $(CYGPATH_W) '$(srcdir)/parsePartition.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-parsePartition.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-parsePartition.Po
#	source='parsePartition.c' object='libpll_sse3_pthreads_a-parsePartition.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-parsePartition.obj `if test -f 'parsePartition.c'; then $(CYGPATH_W) 'parsePartition.c'; else $(CYGPATH_W) '$(srcdir)/parsePartition.c'; fi`

libpll_sse3_pthreads_a-parsimony.o: parsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-parsimony.o -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-parsimony.Tpo -c -o libpll_sse3_pthreads_a-parsimony.o `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-parsimony.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-parsimony.Po
#	source='parsimony.c' object='libpll_sse3_pthreads_a-parsimony.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-parsimony.o `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c

libpll_sse3_pthreads_a-parsimony.obj: parsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_a-parsimony.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_a-parsimony.Tpo -c -o libpll_sse3_pthreads_a-parsimony.obj `if test -f 'parsimony.c'; then $(CYGPATH_W) 'parsimony.c'; else $(CYGPATH_W) '$(srcdir)/parsimony.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_a-parsimony.Tpo $(DEPDIR)/libpll_sse3_pthreads_a-parsimony.Po
#	source='parsimony.c' object='libpll_sse3_pthreads_a-parsimony.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_a-parsimony.obj `if test -f 'parsimony.c'; then $(CYGPATH_W) 'parsimony.c'; else $(CYGPATH_W) '$(srcdir)/parsimony.c'; fi`

libpll_sse3_a-hash.o: hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-hash.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-hash.Tpo -c -o libpll_sse3_a-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-hash.Tpo $(DEPDIR)/libpll_sse3_a-hash.Po
#	source='hash.c' object='libpll_sse3_a-hash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-hash.o `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libpll_sse3_a-hash.obj: hash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-hash.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-hash.Tpo -c -o libpll_sse3_a-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-hash.Tpo $(DEPDIR)/libpll_sse3_a-hash.Po
#	source='hash.c' object='libpll_sse3_a-hash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-hash.obj `if test -f 'hash.c'; then $(CYGPATH_W) 'hash.c'; else $(CYGPATH_W) '$(srcdir)/hash.c'; fi`

libpll_sse3_a-stack.o: stack.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-stack.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-stack.Tpo -c -o libpll_sse3_a-stack.o `test -f 'stack.c' || echo '$(srcdir)/'`stack.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-stack.Tpo $(DEPDIR)/libpll_sse3_a-stack.Po
#	source='stack.c' object='libpll_sse3_a-stack.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-stack.o `test -f 'stack.c' || echo '$(srcdir)/'`stack.c

libpll_sse3_a-stack.obj: stack.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-stack.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-stack.Tpo -c -o libpll_sse3_a-stack.obj `if test -f 'stack.c'; then $(CYGPATH_W) 'stack.c'; else $(CYGPATH_W) '$(srcdir)/stack.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-stack.Tpo $(DEPDIR)/libpll_sse3_a-stack.Po
#	source='stack.c' object='libpll_sse3_a-stack.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-stack.obj `if test -f 'stack.c'; then $(CYGPATH_W) 'stack.c'; else $(CYGPATH_W) '$(srcdir)/stack.c'; fi`

libpll_sse3_a-ssort.o: ssort.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-ssort.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-ssort.Tpo -c -o libpll_sse3_a-ssort.o `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-ssort.Tpo $(DEPDIR)/libpll_sse3_a-ssort.Po
#	source='ssort.c' object='libpll_sse3_a-ssort.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-ssort.o `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c

libpll_sse3_a-ssort.obj: ssort.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-ssort.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-ssort.Tpo -c -o libpll_sse3_a-ssort.obj `if test -f 'ssort.c'; then $(CYGPATH_W) 'ssort.c'; else $(CYGPATH_W) '$(srcdir)/ssort.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-ssort.Tpo $(DEPDIR)/libpll_sse3_a-ssort.Po
#	source='ssort.c' object='libpll_sse3_a-ssort.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-ssort.obj `if test -f 'ssort.c'; then $(CYGPATH_W) 'ssort.c'; else $(CYGPATH_W) '$(srcdir)/ssort.c'; fi`

libpll_sse3_a-queue.o: queue.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-queue.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-queue.Tpo -c -o libpll_sse3_a-queue.o `test -f 'queue.c' || echo '$(srcdir)/'`queue.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-queue.Tpo $(DEPDIR)/libpll_sse3_a-queue.Po
#	source='queue.c' object='libpll_sse3_a-queue.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-queue.o `test -f 'queue.c' || echo '$(srcdir)/'`queue.c

libpll_sse3_a-queue.obj: queue.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-queue.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-queue.Tpo -c -o libpll_sse3_a-queue.obj `if test -f 'queue.c'; then $(CYGPATH_W) 'queue.c'; else $(CYGPATH_W) '$(srcdir)/queue.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-queue.Tpo $(DEPDIR)/libpll_sse3_a-queue.Po
#	source='queue.c' object='libpll_sse3_a-queue.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-queue.obj `if test -f 'queue.c'; then $(CYGPATH_W) 'queue.c'; else $(CYGPATH_W) '$(srcdir)/queue.c'; fi`

libpll_sse3_a-utils.o: utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-utils.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-utils.Tpo -c -o libpll_sse3_a-utils.o `test -f 'utils.c' || echo '$(srcdir)/'`utils.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-utils.Tpo $(DEPDIR)/libpll_sse3_a-utils.Po
#	source='utils.c' object='libpll_sse3_a-utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-utils.o `test -f 'utils.c' || echo '$(srcdir)/'`utils.c

libpll_sse3_a-utils.obj: utils.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-utils.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-utils.Tpo -c -o libpll_sse3_a-utils.obj `if test -f 'utils.c'; then $(CYGPATH_W) 'utils.c'; else $(CYGPATH_W) '$(srcdir)/utils.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-utils.Tpo $(DEPDIR)/libpll_sse3_a-utils.Po
#	source='utils.c' object='libpll_sse3_a-utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-utils.obj `if test -f 'utils.c'; then $(CYGPATH_W) 'utils.c'; else $(CYGPATH_W) '$(srcdir)/utils.c'; fi`

libpll_sse3_a-randomTree.o: randomTree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-randomTree.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-randomTree.Tpo -c -o libpll_sse3_a-randomTree.o `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-randomTree.Tpo $(DEPDIR)/libpll_sse3_a-randomTree.Po
#	source='randomTree.c' object='libpll_sse3_a-randomTree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-randomTree.o `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c

libpll_sse3_a-randomTree.obj: randomTree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-randomTree.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-randomTree.Tpo -c -o libpll_sse3_a-randomTree.obj `if test -f 'randomTree.c'; then $(CYGPATH_W) 'randomTree.c'; else $(CYGPATH_W) '$(srcdir)/randomTree.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-randomTree.Tpo $(DEPDIR)/libpll_sse3_a-randomTree.Po
#	source='randomTree.c' object='libpll_sse3_a-randomTree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-randomTree.obj `if test -f 'randomTree.c'; then $(CYGPATH_W) 'randomTree.c'; else $(CYGPATH_W) '$(srcdir)/randomTree.c'; fi`

libpll_sse3_a-optimizeModel.o: optimizeModel.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-optimizeModel.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-optimizeModel.Tpo -c -o libpll_sse3_a-optimizeModel.o `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-optimizeModel.Tpo $(DEPDIR)/libpll_sse3_a-optimizeModel.Po
#	source='optimizeModel.c' object='libpll_sse3_a-optimizeModel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-optimizeModel.o `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c

libpll_sse3_a-optimizeModel.obj: optimizeModel.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-optimizeModel.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-optimizeModel.Tpo -c -o libpll_sse3_a-optimizeModel.obj `if test -f 'optimizeModel.c'; then $(CYGPATH_W) 'optimizeModel.c'; else $(CYGPATH_W) '$(srcdir)/optimizeModel.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-optimizeModel.Tpo $(DEPDIR)/libpll_sse3_a-optimizeModel.Po
#	source='optimizeModel.c' object='libpll_sse3_a-optimizeModel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-optimizeModel.obj `if test -f 'optimizeModel.c'; then $(CYGPATH_W) 'optimizeModel.c'; else $(CYGPATH_W) '$(srcdir)/optimizeModel.c'; fi`

libpll_sse3_a-trash.o: trash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-trash.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-trash.Tpo -c -o libpll_sse3_a-trash.o `test -f 'trash.c' || echo '$(srcdir)/'`trash.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-trash.Tpo $(DEPDIR)/libpll_sse3_a-trash.Po
#	source='trash.c' object='libpll_sse3_a-trash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-trash.o `test -f 'trash.c' || echo '$(srcdir)/'`trash.c

libpll_sse3_a-trash.obj: trash.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-trash.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-trash.Tpo -c -o libpll_sse3_a-trash.obj `if test -f 'trash.c'; then $(CYGPATH_W) 'trash.c'; else $(CYGPATH_W) '$(srcdir)/trash.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-trash.Tpo $(DEPDIR)/libpll_sse3_a-trash.Po
#	source='trash.c' object='libpll_sse3_a-trash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-trash.obj `if test -f 'trash.c'; then $(CYGPATH_W) 'trash.c'; else $(CYGPATH_W) '$(srcdir)/trash.c'; fi`

libpll_sse3_a-searchAlgo.o: searchAlgo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-searchAlgo.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-searchAlgo.Tpo -c -o libpll_sse3_a-searchAlgo.o `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-searchAlgo.Tpo $(DEPDIR)/libpll_sse3_a-searchAlgo.Po
#	source='searchAlgo.c' object='libpll_sse3_a-searchAlgo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-searchAlgo.o `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c

libpll_sse3_a-searchAlgo.obj: searchAlgo.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-searchAlgo.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-searchAlgo.Tpo -c -o libpll_sse3_a-searchAlgo.obj `if test -f 'searchAlgo.c'; then $(CYGPATH_W) 'searchAlgo.c'; else $(CYGPATH_W) '$(srcdir)/searchAlgo.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-searchAlgo.Tpo $(DEPDIR)/libpll_sse3_a-searchAlgo.Po
#	source='searchAlgo.c' object='libpll_sse3_a-searchAlgo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-searchAlgo.obj `if test -f 'searchAlgo.c'; then $(CYGPATH_W) 'searchAlgo.c'; else $(CYGPATH_W) '$(srcdir)/searchAlgo.c'; fi`

libpll_sse3_a-topologies.o: topologies.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-topologies.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-topologies.Tpo -c -o libpll_sse3_a-topologies.o `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-topologies.Tpo $(DEPDIR)/libpll_sse3_a-topologies.Po
#	source='topologies.c' object='libpll_sse3_a-topologies.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-topologies.o `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c

libpll_sse3_a-topologies.obj: topologies.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-topologies.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-topologies.Tpo -c -o libpll_sse3_a-topologies.obj `if test -f 'topologies.c'; then $(CYGPATH_W) 'topologies.c'; else $(CYGPATH_W) '$(srcdir)/topologies.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-topologies.Tpo $(DEPDIR)/libpll_sse3_a-topologies.Po
#	source='topologies.c' object='libpll_sse3_a-topologies.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-topologies.obj `if test -f 'topologies.c'; then $(CYGPATH_W) 'topologies.c'; else $(CYGPATH_W) '$(srcdir)/topologies.c'; fi`

libpll_sse3_a-fastDNAparsimony.o: fastDNAparsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-fastDNAparsimony.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-fastDNAparsimony.Tpo -c -o libpll_sse3_a-fastDNAparsimony.o `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-fastDNAparsimony.Tpo $(DEPDIR)/libpll_sse3_a-fastDNAparsimony.Po
#	source='fastDNAparsimony.c' object='libpll_sse3_a-fastDNAparsimony.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-fastDNAparsimony.o `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c

libpll_sse3_a-fastDNAparsimony.obj: fastDNAparsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-fastDNAparsimony.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-fastDNAparsimony.Tpo -c -o libpll_sse3_a-fastDNAparsimony.obj `if test -f 'fastDNAparsimony.c'; then $(CYGPATH_W) 'fastDNAparsimony.c'; else $(CYGPATH_W) '$(srcdir)/fastDNAparsimony.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-fastDNAparsimony.Tpo $(DEPDIR)/libpll_sse3_a-fastDNAparsimony.Po
#	source='fastDNAparsimony.c' object='libpll_sse3_a-fastDNAparsimony.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-fastDNAparsimony.obj `if test -f 'fastDNAparsimony.c'; then $(CYGPATH_W) 'fastDNAparsimony.c'; else $(CYGPATH_W) '$(srcdir)/fastDNAparsimony.c'; fi`

libpll_sse3_a-treeIO.o: treeIO.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-treeIO.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-treeIO.Tpo -c -o libpll_sse3_a-treeIO.o `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-treeIO.Tpo $(DEPDIR)/libpll_sse3_a-treeIO.Po
#	source='treeIO.c' object='libpll_sse3_a-treeIO.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-treeIO.o `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c

libpll_sse3_a-treeIO.obj: treeIO.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-treeIO.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-treeIO.Tpo -c -o libpll_sse3_a-treeIO.obj `if test -f 'treeIO.c'; then $(CYGPATH_W) 'treeIO.c'; else $(CYGPATH_W) '$(srcdir)/treeIO.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-treeIO.Tpo $(DEPDIR)/libpll_sse3_a-treeIO.Po
#	source='treeIO.c' object='libpll_sse3_a-treeIO.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-treeIO.obj `if test -f 'treeIO.c'; then $(CYGPATH_W) 'treeIO.c'; else $(CYGPATH_W) '$(srcdir)/treeIO.c'; fi`

libpll_sse3_a-models.o: models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-models.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-models.Tpo -c -o libpll_sse3_a-models.o `test -f 'models.c' || echo '$(srcdir)/'`models.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-models.Tpo $(DEPDIR)/libpll_sse3_a-models.Po
#	source='models.c' object='libpll_sse3_a-models.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-models.o `test -f 'models.c' || echo '$(srcdir)/'`models.c

libpll_sse3_a-models.obj: models.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-models.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-models.Tpo -c -o libpll_sse3_a-models.obj `if test -f 'models.c'; then $(CYGPATH_W) 'models.c'; else $(CYGPATH_W) '$(srcdir)/models.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-models.Tpo $(DEPDIR)/libpll_sse3_a-models.Po
#	source='models.c' object='libpll_sse3_a-models.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-models.obj `if test -f 'models.c'; then $(CYGPATH_W) 'models.c'; else $(CYGPATH_W) '$(srcdir)/models.c'; fi`

libpll_sse3_a-evaluatePartialGenericSpecial.o: evaluatePartialGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-evaluatePartialGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-evaluatePartialGenericSpecial.Tpo -c -o libpll_sse3_a-evaluatePartialGenericSpecial.o `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_a-evaluatePartialGenericSpecial.Po
#	source='evaluatePartialGenericSpecial.c' object='libpll_sse3_a-evaluatePartialGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-evaluatePartialGenericSpecial.o `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c

libpll_sse3_a-evaluatePartialGenericSpecial.obj: evaluatePartialGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-evaluatePartialGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-evaluatePartialGenericSpecial.Tpo -c -o libpll_sse3_a-evaluatePartialGenericSpecial.obj `if test -f 'evaluatePartialGenericSpecial.c'; then $(CYGPATH_W) 'evaluatePartialGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluatePartialGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_a-evaluatePartialGenericSpecial.Po
#	source='evaluatePartialGenericSpecial.c' object='libpll_sse3_a-evaluatePartialGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-evaluatePartialGenericSpecial.obj `if test -f 'evaluatePartialGenericSpecial.c'; then $(CYGPATH_W) 'evaluatePartialGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluatePartialGenericSpecial.c'; fi`

libpll_sse3_a-evaluateGenericSpecial.o: evaluateGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-evaluateGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-evaluateGenericSpecial.Tpo -c -o libpll_sse3_a-evaluateGenericSpecial.o `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_a-evaluateGenericSpecial.Po
#	source='evaluateGenericSpecial.c' object='libpll_sse3_a-evaluateGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-evaluateGenericSpecial.o `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c

libpll_sse3_a-evaluateGenericSpecial.obj: evaluateGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-evaluateGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-evaluateGenericSpecial.Tpo -c -o libpll_sse3_a-evaluateGenericSpecial.obj `if test -f 'evaluateGenericSpecial.c'; then $(CYGPATH_W) 'evaluateGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluateGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_a-evaluateGenericSpecial.Po
#	source='evaluateGenericSpecial.c' object='libpll_sse3_a-evaluateGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-evaluateGenericSpecial.obj `if test -f 'evaluateGenericSpecial.c'; then $(CYGPATH_W) 'evaluateGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/evaluateGenericSpecial.c'; fi`

libpll_sse3_a-newviewGenericSpecial.o: newviewGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-newviewGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-newviewGenericSpecial.Tpo -c -o libpll_sse3_a-newviewGenericSpecial.o `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_a-newviewGenericSpecial.Po
#	source='newviewGenericSpecial.c' object='libpll_sse3_a-newviewGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-newviewGenericSpecial.o `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c

libpll_sse3_a-newviewGenericSpecial.obj: newviewGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-newviewGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-newviewGenericSpecial.Tpo -c -o libpll_sse3_a-newviewGenericSpecial.obj `if test -f 'newviewGenericSpecial.c'; then $(CYGPATH_W) 'newviewGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/newviewGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_a-newviewGenericSpecial.Po
#	source='newviewGenericSpecial.c' object='libpll_sse3_a-newviewGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-newviewGenericSpecial.obj `if test -f 'newviewGenericSpecial.c'; then $(CYGPATH_W) 'newviewGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/newviewGenericSpecial.c'; fi`

libpll_sse3_a-makenewzGenericSpecial.o: makenewzGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-makenewzGenericSpecial.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-makenewzGenericSpecial.Tpo -c -o libpll_sse3_a-makenewzGenericSpecial.o `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_a-makenewzGenericSpecial.Po
#	source='makenewzGenericSpecial.c' object='libpll_sse3_a-makenewzGenericSpecial.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-makenewzGenericSpecial.o `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c

libpll_sse3_a-makenewzGenericSpecial.obj: makenewzGenericSpecial.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-makenewzGenericSpecial.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-makenewzGenericSpecial.Tpo -c -o libpll_sse3_a-makenewzGenericSpecial.obj `if test -f 'makenewzGenericSpecial.c'; then $(CYGPATH_W) 'makenewzGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/makenewzGenericSpecial.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_a-makenewzGenericSpecial.Po
#	source='makenewzGenericSpecial.c' object='libpll_sse3_a-makenewzGenericSpecial.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-makenewzGenericSpecial.obj `if test -f 'makenewzGenericSpecial.c'; then $(CYGPATH_W) 'makenewzGenericSpecial.c'; else $(CYGPATH_W) '$(srcdir)/makenewzGenericSpecial.c'; fi`

libpll_sse3_a-bipartitionList.o: bipartitionList.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-bipartitionList.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-bipartitionList.Tpo -c -o libpll_sse3_a-bipartitionList.o `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-bipartitionList.Tpo $(DEPDIR)/libpll_sse3_a-bipartitionList.Po
#	source='bipartitionList.c' object='libpll_sse3_a-bipartitionList.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-bipartitionList.o `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c

libpll_sse3_a-bipartitionList.obj: bipartitionList.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-bipartitionList.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-bipartitionList.Tpo -c -o libpll_sse3_a-bipartitionList.obj `if test -f 'bipartitionList.c'; then $(CYGPATH_W) 'bipartitionList.c'; else $(CYGPATH_W) '$(srcdir)/bipartitionList.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-bipartitionList.Tpo $(DEPDIR)/libpll_sse3_a-bipartitionList.Po
#	source='bipartitionList.c' object='libpll_sse3_a-bipartitionList.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-bipartitionList.obj `if test -f 'bipartitionList.c'; then $(CYGPATH_W) 'bipartitionList.c'; else $(CYGPATH_W) '$(srcdir)/bipartitionList.c'; fi`

libpll_sse3_a-restartHashTable.o: restartHashTable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-restartHashTable.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-restartHashTable.Tpo -c -o libpll_sse3_a-restartHashTable.o `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-restartHashTable.Tpo $(DEPDIR)/libpll_sse3_a-restartHashTable.Po
#	source='restartHashTable.c' object='libpll_sse3_a-restartHashTable.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-restartHashTable.o `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c

libpll_sse3_a-restartHashTable.obj: restartHashTable.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-restartHashTable.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-restartHashTable.Tpo -c -o libpll_sse3_a-restartHashTable.obj `if test -f 'restartHashTable.c'; then $(CYGPATH_W) 'restartHashTable.c'; else $(CYGPATH_W) '$(srcdir)/restartHashTable.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-restartHashTable.Tpo $(DEPDIR)/libpll_sse3_a-restartHashTable.Po
#	source='restartHashTable.c' object='libpll_sse3_a-restartHashTable.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-restartHashTable.obj `if test -f 'restartHashTable.c'; then $(CYGPATH_W) 'restartHashTable.c'; else $(CYGPATH_W) '$(srcdir)/restartHashTable.c'; fi`

libpll_sse3_a-recom.o: recom.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-recom.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-recom.Tpo -c -o libpll_sse3_a-recom.o `test -f 'recom.c' || echo '$(srcdir)/'`recom.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-recom.Tpo $(DEPDIR)/libpll_sse3_a-recom.Po
#	source='recom.c' object='libpll_sse3_a-recom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-recom.o `test -f 'recom.c' || echo '$(srcdir)/'`recom.c

libpll_sse3_a-recom.obj: recom.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-recom.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-recom.Tpo -c -o libpll_sse3_a-recom.obj `if test -f 'recom.c'; then $(CYGPATH_W) 'recom.c'; else $(CYGPATH_W) '$(srcdir)/recom.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-recom.Tpo $(DEPDIR)/libpll_sse3_a-recom.Po
#	source='recom.c' object='libpll_sse3_a-recom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-recom.obj `if test -f 'recom.c'; then $(CYGPATH_W) 'recom.c'; else $(CYGPATH_W) '$(srcdir)/recom.c'; fi`

libpll_sse3_a-lexer.o: lexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-lexer.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-lexer.Tpo -c -o libpll_sse3_a-lexer.o `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-lexer.Tpo $(DEPDIR)/libpll_sse3_a-lexer.Po
#	source='lexer.c' object='libpll_sse3_a-lexer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-lexer.o `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c

libpll_sse3_a-lexer.obj: lexer.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-lexer.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-lexer.Tpo -c -o libpll_sse3_a-lexer.obj `if test -f 'lexer.c'; then $(CYGPATH_W) 'lexer.c'; else $(CYGPATH_W) '$(srcdir)/lexer.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-lexer.Tpo $(DEPDIR)/libpll_sse3_a-lexer.Po
#	source='lexer.c' object='libpll_sse3_a-lexer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-lexer.obj `if test -f 'lexer.c'; then $(CYGPATH_W) 'lexer.c'; else $(CYGPATH_W) '$(srcdir)/lexer.c'; fi`

libpll_sse3_a-alignment.o: alignment.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-alignment.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-alignment.Tpo -c -o libpll_sse3_a-alignment.o `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-alignment.Tpo $(DEPDIR)/libpll_sse3_a-alignment.Po
#	source='alignment.c' object='libpll_sse3_a-alignment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-alignment.o `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c

libpll_sse3_a-alignment.obj: alignment.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-alignment.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-alignment.Tpo -c -o libpll_sse3_a-alignment.obj `if test -f 'alignment.c'; then $(CYGPATH_W) 'alignment.c'; else $(CYGPATH_W) '$(srcdir)/alignment.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-alignment.Tpo $(DEPDIR)/libpll_sse3_a-alignment.Po
#	source='alignment.c' object='libpll_sse3_a-alignment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-alignment.obj `if test -f 'alignment.c'; then $(CYGPATH_W) 'alignment.c'; else $(CYGPATH_W) '$(srcdir)/alignment.c'; fi`

libpll_sse3_a-newick.o: newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-newick.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-newick.Tpo -c -o libpll_sse3_a-newick.o `test -f 'newick.c' || echo '$(srcdir)/'`newick.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-newick.Tpo $(DEPDIR)/libpll_sse3_a-newick.Po
#	source='newick.c' object='libpll_sse3_a-newick.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-newick.o `test -f 'newick.c' || echo '$(srcdir)/'`newick.c

libpll_sse3_a-newick.obj: newick.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-newick.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-newick.Tpo -c -o libpll_sse3_a-newick.obj `if test -f 'newick.c'; then $(CYGPATH_W) 'newick.c'; else $(CYGPATH_W) '$(srcdir)/newick.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-newick.Tpo $(DEPDIR)/libpll_sse3_a-newick.Po
#	source='newick.c' object='libpll_sse3_a-newick.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-newick.obj `if test -f 'newick.c'; then $(CYGPATH_W) 'newick.c'; else $(CYGPATH_W) '$(srcdir)/newick.c'; fi`

libpll_sse3_a-parsePartition.o: parsePartition.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-parsePartition.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-parsePartition.Tpo -c -o libpll_sse3_a-parsePartition.o `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-parsePartition.Tpo $(DEPDIR)/libpll_sse3_a-parsePartition.Po
#	source='parsePartition.c' object='libpll_sse3_a-parsePartition.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-parsePartition.o `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c

libpll_sse3_a-parsePartition.obj: parsePartition.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-parsePartition.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-parsePartition.Tpo -c -o libpll_sse3_a-parsePartition.obj `if test -f 'parsePartition.c'; then $(CYGPATH_W) 'parsePartition.c'; else $(CYGPATH_W) '$(srcdir)/parsePartition.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-parsePartition.Tpo $(DEPDIR)/libpll_sse3_a-parsePartition.Po
#	source='parsePartition.c' object='libpll_sse3_a-parsePartition.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-parsePartition.obj `if test -f 'parsePartition.c'; then $(CYGPATH_W) 'parsePartition.c'; else $(CYGPATH_W) '$(srcdir)/parsePartition.c'; fi`

libpll_sse3_a-parsimony.o: parsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-parsimony.o -MD -MP -MF $(DEPDIR)/libpll_sse3_a-parsimony.Tpo -c -o libpll_sse3_a-parsimony.o `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c
	$(am__mv) $(DEPDIR)/libpll_sse3_a-parsimony.Tpo $(DEPDIR)/libpll_sse3_a-parsimony.Po
#	source='parsimony.c' object='libpll_sse3_a-parsimony.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-parsimony.o `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c

libpll_sse3_a-parsimony.obj: parsimony.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -MT libpll_sse3_a-parsimony.obj -MD -MP -MF $(DEPDIR)/libpll_sse3_a-parsimony.Tpo -c -o libpll_sse3_a-parsimony.obj `if test -f 'parsimony.c'; then $(CYGPATH_W) 'parsimony.c'; else $(CYGPATH_W) '$(srcdir)/parsimony.c'; fi`
	$(am__mv) $(DEPDIR)/libpll_sse3_a-parsimony.Tpo $(DEPDIR)/libpll_sse3_a-parsimony.Po
#	source='parsimony.c' object='libpll_sse3_a-parsimony.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_a_CFLAGS) $(CFLAGS) -c -o libpll_sse3_a-parsimony.obj `if test -f 'parsimony.c'; then $(CYGPATH_W) 'parsimony.c'; else $(CYGPATH_W) '$(srcdir)/parsimony.c'; fi`

libpll_avx_pthreads_la-avxLikelihood.lo: avxLikelihood.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-avxLikelihood.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-avxLikelihood.Tpo -c -o libpll_avx_pthreads_la-avxLikelihood.lo `test -f 'avxLikelihood.c' || echo '$(srcdir)/'`avxLikelihood.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-avxLikelihood.Tpo $(DEPDIR)/libpll_avx_pthreads_la-avxLikelihood.Plo
#	source='avxLikelihood.c' object='libpll_avx_pthreads_la-avxLikelihood.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-avxLikelihood.lo `test -f 'avxLikelihood.c' || echo '$(srcdir)/'`avxLikelihood.c

libpll_avx_pthreads_la-genericParallelization.lo: genericParallelization.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-genericParallelization.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-genericParallelization.Tpo -c -o libpll_avx_pthreads_la-genericParallelization.lo `test -f 'genericParallelization.c' || echo '$(srcdir)/'`genericParallelization.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-genericParallelization.Tpo $(DEPDIR)/libpll_avx_pthreads_la-genericParallelization.Plo
#	source='genericParallelization.c' object='libpll_avx_pthreads_la-genericParallelization.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-genericParallelization.lo `test -f 'genericParallelization.c' || echo '$(srcdir)/'`genericParallelization.c

libpll_avx_pthreads_la-hash.lo: hash.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-hash.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-hash.Tpo -c -o libpll_avx_pthreads_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-hash.Tpo $(DEPDIR)/libpll_avx_pthreads_la-hash.Plo
#	source='hash.c' object='libpll_avx_pthreads_la-hash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libpll_avx_pthreads_la-stack.lo: stack.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-stack.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-stack.Tpo -c -o libpll_avx_pthreads_la-stack.lo `test -f 'stack.c' || echo '$(srcdir)/'`stack.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-stack.Tpo $(DEPDIR)/libpll_avx_pthreads_la-stack.Plo
#	source='stack.c' object='libpll_avx_pthreads_la-stack.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-stack.lo `test -f 'stack.c' || echo '$(srcdir)/'`stack.c

libpll_avx_pthreads_la-ssort.lo: ssort.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-ssort.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-ssort.Tpo -c -o libpll_avx_pthreads_la-ssort.lo `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-ssort.Tpo $(DEPDIR)/libpll_avx_pthreads_la-ssort.Plo
#	source='ssort.c' object='libpll_avx_pthreads_la-ssort.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-ssort.lo `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c

libpll_avx_pthreads_la-queue.lo: queue.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-queue.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-queue.Tpo -c -o libpll_avx_pthreads_la-queue.lo `test -f 'queue.c' || echo '$(srcdir)/'`queue.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-queue.Tpo $(DEPDIR)/libpll_avx_pthreads_la-queue.Plo
#	source='queue.c' object='libpll_avx_pthreads_la-queue.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-queue.lo `test -f 'queue.c' || echo '$(srcdir)/'`queue.c

libpll_avx_pthreads_la-utils.lo: utils.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-utils.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-utils.Tpo -c -o libpll_avx_pthreads_la-utils.lo `test -f 'utils.c' || echo '$(srcdir)/'`utils.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-utils.Tpo $(DEPDIR)/libpll_avx_pthreads_la-utils.Plo
#	source='utils.c' object='libpll_avx_pthreads_la-utils.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-utils.lo `test -f 'utils.c' || echo '$(srcdir)/'`utils.c

libpll_avx_pthreads_la-randomTree.lo: randomTree.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-randomTree.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-randomTree.Tpo -c -o libpll_avx_pthreads_la-randomTree.lo `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-randomTree.Tpo $(DEPDIR)/libpll_avx_pthreads_la-randomTree.Plo
#	source='randomTree.c' object='libpll_avx_pthreads_la-randomTree.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-randomTree.lo `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c

libpll_avx_pthreads_la-optimizeModel.lo: optimizeModel.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-optimizeModel.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-optimizeModel.Tpo -c -o libpll_avx_pthreads_la-optimizeModel.lo `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-optimizeModel.Tpo $(DEPDIR)/libpll_avx_pthreads_la-optimizeModel.Plo
#	source='optimizeModel.c' object='libpll_avx_pthreads_la-optimizeModel.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-optimizeModel.lo `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c

libpll_avx_pthreads_la-trash.lo: trash.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-trash.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-trash.Tpo -c -o libpll_avx_pthreads_la-trash.lo `test -f 'trash.c' || echo '$(srcdir)/'`trash.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-trash.Tpo $(DEPDIR)/libpll_avx_pthreads_la-trash.Plo
#	source='trash.c' object='libpll_avx_pthreads_la-trash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-trash.lo `test -f 'trash.c' || echo '$(srcdir)/'`trash.c

libpll_avx_pthreads_la-searchAlgo.lo: searchAlgo.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-searchAlgo.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-searchAlgo.Tpo -c -o libpll_avx_pthreads_la-searchAlgo.lo `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-searchAlgo.Tpo $(DEPDIR)/libpll_avx_pthreads_la-searchAlgo.Plo
#	source='searchAlgo.c' object='libpll_avx_pthreads_la-searchAlgo.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-searchAlgo.lo `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c

libpll_avx_pthreads_la-topologies.lo: topologies.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-topologies.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-topologies.Tpo -c -o libpll_avx_pthreads_la-topologies.lo `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-topologies.Tpo $(DEPDIR)/libpll_avx_pthreads_la-topologies.Plo
#	source='topologies.c' object='libpll_avx_pthreads_la-topologies.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-topologies.lo `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c

libpll_avx_pthreads_la-fastDNAparsimony.lo: fastDNAparsimony.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-fastDNAparsimony.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-fastDNAparsimony.Tpo -c -o libpll_avx_pthreads_la-fastDNAparsimony.lo `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-fastDNAparsimony.Tpo $(DEPDIR)/libpll_avx_pthreads_la-fastDNAparsimony.Plo
#	source='fastDNAparsimony.c' object='libpll_avx_pthreads_la-fastDNAparsimony.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-fastDNAparsimony.lo `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c

libpll_avx_pthreads_la-treeIO.lo: treeIO.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-treeIO.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-treeIO.Tpo -c -o libpll_avx_pthreads_la-treeIO.lo `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-treeIO.Tpo $(DEPDIR)/libpll_avx_pthreads_la-treeIO.Plo
#	source='treeIO.c' object='libpll_avx_pthreads_la-treeIO.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-treeIO.lo `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c

libpll_avx_pthreads_la-models.lo: models.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-models.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-models.Tpo -c -o libpll_avx_pthreads_la-models.lo `test -f 'models.c' || echo '$(srcdir)/'`models.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-models.Tpo $(DEPDIR)/libpll_avx_pthreads_la-models.Plo
#	source='models.c' object='libpll_avx_pthreads_la-models.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-models.lo `test -f 'models.c' || echo '$(srcdir)/'`models.c

libpll_avx_pthreads_la-evaluatePartialGenericSpecial.lo: evaluatePartialGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-evaluatePartialGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-evaluatePartialGenericSpecial.Tpo -c -o libpll_avx_pthreads_la-evaluatePartialGenericSpecial.lo `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_la-evaluatePartialGenericSpecial.Plo
#	source='evaluatePartialGenericSpecial.c' object='libpll_avx_pthreads_la-evaluatePartialGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-evaluatePartialGenericSpecial.lo `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c

libpll_avx_pthreads_la-evaluateGenericSpecial.lo: evaluateGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-evaluateGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-evaluateGenericSpecial.Tpo -c -o libpll_avx_pthreads_la-evaluateGenericSpecial.lo `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_la-evaluateGenericSpecial.Plo
#	source='evaluateGenericSpecial.c' object='libpll_avx_pthreads_la-evaluateGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-evaluateGenericSpecial.lo `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c

libpll_avx_pthreads_la-newviewGenericSpecial.lo: newviewGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-newviewGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-newviewGenericSpecial.Tpo -c -o libpll_avx_pthreads_la-newviewGenericSpecial.lo `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_la-newviewGenericSpecial.Plo
#	source='newviewGenericSpecial.c' object='libpll_avx_pthreads_la-newviewGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-newviewGenericSpecial.lo `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c

libpll_avx_pthreads_la-makenewzGenericSpecial.lo: makenewzGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-makenewzGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-makenewzGenericSpecial.Tpo -c -o libpll_avx_pthreads_la-makenewzGenericSpecial.lo `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_avx_pthreads_la-makenewzGenericSpecial.Plo
#	source='makenewzGenericSpecial.c' object='libpll_avx_pthreads_la-makenewzGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-makenewzGenericSpecial.lo `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c

libpll_avx_pthreads_la-bipartitionList.lo: bipartitionList.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-bipartitionList.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-bipartitionList.Tpo -c -o libpll_avx_pthreads_la-bipartitionList.lo `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-bipartitionList.Tpo $(DEPDIR)/libpll_avx_pthreads_la-bipartitionList.Plo
#	source='bipartitionList.c' object='libpll_avx_pthreads_la-bipartitionList.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-bipartitionList.lo `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c

libpll_avx_pthreads_la-restartHashTable.lo: restartHashTable.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-restartHashTable.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-restartHashTable.Tpo -c -o libpll_avx_pthreads_la-restartHashTable.lo `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-restartHashTable.Tpo $(DEPDIR)/libpll_avx_pthreads_la-restartHashTable.Plo
#	source='restartHashTable.c' object='libpll_avx_pthreads_la-restartHashTable.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-restartHashTable.lo `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c

libpll_avx_pthreads_la-recom.lo: recom.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-recom.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-recom.Tpo -c -o libpll_avx_pthreads_la-recom.lo `test -f 'recom.c' || echo '$(srcdir)/'`recom.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-recom.Tpo $(DEPDIR)/libpll_avx_pthreads_la-recom.Plo
#	source='recom.c' object='libpll_avx_pthreads_la-recom.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-recom.lo `test -f 'recom.c' || echo '$(srcdir)/'`recom.c

libpll_avx_pthreads_la-lexer.lo: lexer.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-lexer.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-lexer.Tpo -c -o libpll_avx_pthreads_la-lexer.lo `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-lexer.Tpo $(DEPDIR)/libpll_avx_pthreads_la-lexer.Plo
#	source='lexer.c' object='libpll_avx_pthreads_la-lexer.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-lexer.lo `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c

libpll_avx_pthreads_la-alignment.lo: alignment.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-alignment.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-alignment.Tpo -c -o libpll_avx_pthreads_la-alignment.lo `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-alignment.Tpo $(DEPDIR)/libpll_avx_pthreads_la-alignment.Plo
#	source='alignment.c' object='libpll_avx_pthreads_la-alignment.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-alignment.lo `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c

libpll_avx_pthreads_la-newick.lo: newick.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-newick.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-newick.Tpo -c -o libpll_avx_pthreads_la-newick.lo `test -f 'newick.c' || echo '$(srcdir)/'`newick.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-newick.Tpo $(DEPDIR)/libpll_avx_pthreads_la-newick.Plo
#	source='newick.c' object='libpll_avx_pthreads_la-newick.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-newick.lo `test -f 'newick.c' || echo '$(srcdir)/'`newick.c

libpll_avx_pthreads_la-parsePartition.lo: parsePartition.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-parsePartition.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-parsePartition.Tpo -c -o libpll_avx_pthreads_la-parsePartition.lo `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-parsePartition.Tpo $(DEPDIR)/libpll_avx_pthreads_la-parsePartition.Plo
#	source='parsePartition.c' object='libpll_avx_pthreads_la-parsePartition.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-parsePartition.lo `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c

libpll_avx_pthreads_la-parsimony.lo: parsimony.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_avx_pthreads_la-parsimony.lo -MD -MP -MF $(DEPDIR)/libpll_avx_pthreads_la-parsimony.Tpo -c -o libpll_avx_pthreads_la-parsimony.lo `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c
	$(am__mv) $(DEPDIR)/libpll_avx_pthreads_la-parsimony.Tpo $(DEPDIR)/libpll_avx_pthreads_la-parsimony.Plo
#	source='parsimony.c' object='libpll_avx_pthreads_la-parsimony.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_pthreads_la-parsimony.lo `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c

libpll_avx_la-avxLikelihood.lo: avxLikelihood.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-avxLikelihood.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-avxLikelihood.Tpo -c -o libpll_avx_la-avxLikelihood.lo `test -f 'avxLikelihood.c' || echo '$(srcdir)/'`avxLikelihood.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-avxLikelihood.Tpo $(DEPDIR)/libpll_avx_la-avxLikelihood.Plo
#	source='avxLikelihood.c' object='libpll_avx_la-avxLikelihood.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-avxLikelihood.lo `test -f 'avxLikelihood.c' || echo '$(srcdir)/'`avxLikelihood.c

libpll_avx_la-hash.lo: hash.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-hash.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-hash.Tpo -c -o libpll_avx_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-hash.Tpo $(DEPDIR)/libpll_avx_la-hash.Plo
#	source='hash.c' object='libpll_avx_la-hash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libpll_avx_la-stack.lo: stack.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-stack.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-stack.Tpo -c -o libpll_avx_la-stack.lo `test -f 'stack.c' || echo '$(srcdir)/'`stack.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-stack.Tpo $(DEPDIR)/libpll_avx_la-stack.Plo
#	source='stack.c' object='libpll_avx_la-stack.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-stack.lo `test -f 'stack.c' || echo '$(srcdir)/'`stack.c

libpll_avx_la-ssort.lo: ssort.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-ssort.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-ssort.Tpo -c -o libpll_avx_la-ssort.lo `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-ssort.Tpo $(DEPDIR)/libpll_avx_la-ssort.Plo
#	source='ssort.c' object='libpll_avx_la-ssort.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-ssort.lo `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c

libpll_avx_la-queue.lo: queue.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-queue.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-queue.Tpo -c -o libpll_avx_la-queue.lo `test -f 'queue.c' || echo '$(srcdir)/'`queue.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-queue.Tpo $(DEPDIR)/libpll_avx_la-queue.Plo
#	source='queue.c' object='libpll_avx_la-queue.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-queue.lo `test -f 'queue.c' || echo '$(srcdir)/'`queue.c

libpll_avx_la-utils.lo: utils.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-utils.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-utils.Tpo -c -o libpll_avx_la-utils.lo `test -f 'utils.c' || echo '$(srcdir)/'`utils.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-utils.Tpo $(DEPDIR)/libpll_avx_la-utils.Plo
#	source='utils.c' object='libpll_avx_la-utils.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-utils.lo `test -f 'utils.c' || echo '$(srcdir)/'`utils.c

libpll_avx_la-randomTree.lo: randomTree.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-randomTree.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-randomTree.Tpo -c -o libpll_avx_la-randomTree.lo `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-randomTree.Tpo $(DEPDIR)/libpll_avx_la-randomTree.Plo
#	source='randomTree.c' object='libpll_avx_la-randomTree.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-randomTree.lo `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c

libpll_avx_la-optimizeModel.lo: optimizeModel.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-optimizeModel.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-optimizeModel.Tpo -c -o libpll_avx_la-optimizeModel.lo `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-optimizeModel.Tpo $(DEPDIR)/libpll_avx_la-optimizeModel.Plo
#	source='optimizeModel.c' object='libpll_avx_la-optimizeModel.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-optimizeModel.lo `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c

libpll_avx_la-trash.lo: trash.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-trash.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-trash.Tpo -c -o libpll_avx_la-trash.lo `test -f 'trash.c' || echo '$(srcdir)/'`trash.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-trash.Tpo $(DEPDIR)/libpll_avx_la-trash.Plo
#	source='trash.c' object='libpll_avx_la-trash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-trash.lo `test -f 'trash.c' || echo '$(srcdir)/'`trash.c

libpll_avx_la-searchAlgo.lo: searchAlgo.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-searchAlgo.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-searchAlgo.Tpo -c -o libpll_avx_la-searchAlgo.lo `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-searchAlgo.Tpo $(DEPDIR)/libpll_avx_la-searchAlgo.Plo
#	source='searchAlgo.c' object='libpll_avx_la-searchAlgo.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-searchAlgo.lo `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c

libpll_avx_la-topologies.lo: topologies.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-topologies.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-topologies.Tpo -c -o libpll_avx_la-topologies.lo `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-topologies.Tpo $(DEPDIR)/libpll_avx_la-topologies.Plo
#	source='topologies.c' object='libpll_avx_la-topologies.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-topologies.lo `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c

libpll_avx_la-fastDNAparsimony.lo: fastDNAparsimony.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-fastDNAparsimony.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-fastDNAparsimony.Tpo -c -o libpll_avx_la-fastDNAparsimony.lo `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-fastDNAparsimony.Tpo $(DEPDIR)/libpll_avx_la-fastDNAparsimony.Plo
#	source='fastDNAparsimony.c' object='libpll_avx_la-fastDNAparsimony.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-fastDNAparsimony.lo `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c

libpll_avx_la-treeIO.lo: treeIO.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-treeIO.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-treeIO.Tpo -c -o libpll_avx_la-treeIO.lo `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-treeIO.Tpo $(DEPDIR)/libpll_avx_la-treeIO.Plo
#	source='treeIO.c' object='libpll_avx_la-treeIO.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-treeIO.lo `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c

libpll_avx_la-models.lo: models.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-models.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-models.Tpo -c -o libpll_avx_la-models.lo `test -f 'models.c' || echo '$(srcdir)/'`models.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-models.Tpo $(DEPDIR)/libpll_avx_la-models.Plo
#	source='models.c' object='libpll_avx_la-models.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-models.lo `test -f 'models.c' || echo '$(srcdir)/'`models.c

libpll_avx_la-evaluatePartialGenericSpecial.lo: evaluatePartialGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-evaluatePartialGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-evaluatePartialGenericSpecial.Tpo -c -o libpll_avx_la-evaluatePartialGenericSpecial.lo `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_avx_la-evaluatePartialGenericSpecial.Plo
#	source='evaluatePartialGenericSpecial.c' object='libpll_avx_la-evaluatePartialGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-evaluatePartialGenericSpecial.lo `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c

libpll_avx_la-evaluateGenericSpecial.lo: evaluateGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-evaluateGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-evaluateGenericSpecial.Tpo -c -o libpll_avx_la-evaluateGenericSpecial.lo `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_avx_la-evaluateGenericSpecial.Plo
#	source='evaluateGenericSpecial.c' object='libpll_avx_la-evaluateGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-evaluateGenericSpecial.lo `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c

libpll_avx_la-newviewGenericSpecial.lo: newviewGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-newviewGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-newviewGenericSpecial.Tpo -c -o libpll_avx_la-newviewGenericSpecial.lo `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_avx_la-newviewGenericSpecial.Plo
#	source='newviewGenericSpecial.c' object='libpll_avx_la-newviewGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-newviewGenericSpecial.lo `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c

libpll_avx_la-makenewzGenericSpecial.lo: makenewzGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-makenewzGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-makenewzGenericSpecial.Tpo -c -o libpll_avx_la-makenewzGenericSpecial.lo `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_avx_la-makenewzGenericSpecial.Plo
#	source='makenewzGenericSpecial.c' object='libpll_avx_la-makenewzGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-makenewzGenericSpecial.lo `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c

libpll_avx_la-bipartitionList.lo: bipartitionList.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-bipartitionList.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-bipartitionList.Tpo -c -o libpll_avx_la-bipartitionList.lo `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-bipartitionList.Tpo $(DEPDIR)/libpll_avx_la-bipartitionList.Plo
#	source='bipartitionList.c' object='libpll_avx_la-bipartitionList.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-bipartitionList.lo `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c

libpll_avx_la-restartHashTable.lo: restartHashTable.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-restartHashTable.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-restartHashTable.Tpo -c -o libpll_avx_la-restartHashTable.lo `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-restartHashTable.Tpo $(DEPDIR)/libpll_avx_la-restartHashTable.Plo
#	source='restartHashTable.c' object='libpll_avx_la-restartHashTable.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-restartHashTable.lo `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c

libpll_avx_la-recom.lo: recom.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-recom.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-recom.Tpo -c -o libpll_avx_la-recom.lo `test -f 'recom.c' || echo '$(srcdir)/'`recom.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-recom.Tpo $(DEPDIR)/libpll_avx_la-recom.Plo
#	source='recom.c' object='libpll_avx_la-recom.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-recom.lo `test -f 'recom.c' || echo '$(srcdir)/'`recom.c

libpll_avx_la-lexer.lo: lexer.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-lexer.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-lexer.Tpo -c -o libpll_avx_la-lexer.lo `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-lexer.Tpo $(DEPDIR)/libpll_avx_la-lexer.Plo
#	source='lexer.c' object='libpll_avx_la-lexer.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-lexer.lo `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c

libpll_avx_la-alignment.lo: alignment.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-alignment.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-alignment.Tpo -c -o libpll_avx_la-alignment.lo `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-alignment.Tpo $(DEPDIR)/libpll_avx_la-alignment.Plo
#	source='alignment.c' object='libpll_avx_la-alignment.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-alignment.lo `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c

libpll_avx_la-newick.lo: newick.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-newick.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-newick.Tpo -c -o libpll_avx_la-newick.lo `test -f 'newick.c' || echo '$(srcdir)/'`newick.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-newick.Tpo $(DEPDIR)/libpll_avx_la-newick.Plo
#	source='newick.c' object='libpll_avx_la-newick.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-newick.lo `test -f 'newick.c' || echo '$(srcdir)/'`newick.c

libpll_avx_la-parsePartition.lo: parsePartition.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-parsePartition.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-parsePartition.Tpo -c -o libpll_avx_la-parsePartition.lo `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-parsePartition.Tpo $(DEPDIR)/libpll_avx_la-parsePartition.Plo
#	source='parsePartition.c' object='libpll_avx_la-parsePartition.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-parsePartition.lo `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c

libpll_avx_la-parsimony.lo: parsimony.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -MT libpll_avx_la-parsimony.lo -MD -MP -MF $(DEPDIR)/libpll_avx_la-parsimony.Tpo -c -o libpll_avx_la-parsimony.lo `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c
	$(am__mv) $(DEPDIR)/libpll_avx_la-parsimony.Tpo $(DEPDIR)/libpll_avx_la-parsimony.Plo
#	source='parsimony.c' object='libpll_avx_la-parsimony.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_avx_la_CFLAGS) $(CFLAGS) -c -o libpll_avx_la-parsimony.lo `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c

libpll_sse3_pthreads_la-genericParallelization.lo: genericParallelization.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-genericParallelization.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-genericParallelization.Tpo -c -o libpll_sse3_pthreads_la-genericParallelization.lo `test -f 'genericParallelization.c' || echo '$(srcdir)/'`genericParallelization.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-genericParallelization.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-genericParallelization.Plo
#	source='genericParallelization.c' object='libpll_sse3_pthreads_la-genericParallelization.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-genericParallelization.lo `test -f 'genericParallelization.c' || echo '$(srcdir)/'`genericParallelization.c

libpll_sse3_pthreads_la-hash.lo: hash.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-hash.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-hash.Tpo -c -o libpll_sse3_pthreads_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-hash.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-hash.Plo
#	source='hash.c' object='libpll_sse3_pthreads_la-hash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libpll_sse3_pthreads_la-stack.lo: stack.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-stack.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-stack.Tpo -c -o libpll_sse3_pthreads_la-stack.lo `test -f 'stack.c' || echo '$(srcdir)/'`stack.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-stack.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-stack.Plo
#	source='stack.c' object='libpll_sse3_pthreads_la-stack.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-stack.lo `test -f 'stack.c' || echo '$(srcdir)/'`stack.c

libpll_sse3_pthreads_la-ssort.lo: ssort.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-ssort.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-ssort.Tpo -c -o libpll_sse3_pthreads_la-ssort.lo `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-ssort.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-ssort.Plo
#	source='ssort.c' object='libpll_sse3_pthreads_la-ssort.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-ssort.lo `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c

libpll_sse3_pthreads_la-queue.lo: queue.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-queue.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-queue.Tpo -c -o libpll_sse3_pthreads_la-queue.lo `test -f 'queue.c' || echo '$(srcdir)/'`queue.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-queue.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-queue.Plo
#	source='queue.c' object='libpll_sse3_pthreads_la-queue.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-queue.lo `test -f 'queue.c' || echo '$(srcdir)/'`queue.c

libpll_sse3_pthreads_la-utils.lo: utils.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-utils.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-utils.Tpo -c -o libpll_sse3_pthreads_la-utils.lo `test -f 'utils.c' || echo '$(srcdir)/'`utils.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-utils.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-utils.Plo
#	source='utils.c' object='libpll_sse3_pthreads_la-utils.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-utils.lo `test -f 'utils.c' || echo '$(srcdir)/'`utils.c

libpll_sse3_pthreads_la-randomTree.lo: randomTree.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-randomTree.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-randomTree.Tpo -c -o libpll_sse3_pthreads_la-randomTree.lo `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-randomTree.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-randomTree.Plo
#	source='randomTree.c' object='libpll_sse3_pthreads_la-randomTree.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-randomTree.lo `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c

libpll_sse3_pthreads_la-optimizeModel.lo: optimizeModel.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-optimizeModel.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-optimizeModel.Tpo -c -o libpll_sse3_pthreads_la-optimizeModel.lo `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-optimizeModel.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-optimizeModel.Plo
#	source='optimizeModel.c' object='libpll_sse3_pthreads_la-optimizeModel.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-optimizeModel.lo `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c

libpll_sse3_pthreads_la-trash.lo: trash.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-trash.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-trash.Tpo -c -o libpll_sse3_pthreads_la-trash.lo `test -f 'trash.c' || echo '$(srcdir)/'`trash.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-trash.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-trash.Plo
#	source='trash.c' object='libpll_sse3_pthreads_la-trash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-trash.lo `test -f 'trash.c' || echo '$(srcdir)/'`trash.c

libpll_sse3_pthreads_la-searchAlgo.lo: searchAlgo.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-searchAlgo.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-searchAlgo.Tpo -c -o libpll_sse3_pthreads_la-searchAlgo.lo `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-searchAlgo.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-searchAlgo.Plo
#	source='searchAlgo.c' object='libpll_sse3_pthreads_la-searchAlgo.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-searchAlgo.lo `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c

libpll_sse3_pthreads_la-topologies.lo: topologies.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-topologies.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-topologies.Tpo -c -o libpll_sse3_pthreads_la-topologies.lo `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-topologies.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-topologies.Plo
#	source='topologies.c' object='libpll_sse3_pthreads_la-topologies.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-topologies.lo `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c

libpll_sse3_pthreads_la-fastDNAparsimony.lo: fastDNAparsimony.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-fastDNAparsimony.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-fastDNAparsimony.Tpo -c -o libpll_sse3_pthreads_la-fastDNAparsimony.lo `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-fastDNAparsimony.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-fastDNAparsimony.Plo
#	source='fastDNAparsimony.c' object='libpll_sse3_pthreads_la-fastDNAparsimony.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-fastDNAparsimony.lo `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c

libpll_sse3_pthreads_la-treeIO.lo: treeIO.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-treeIO.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-treeIO.Tpo -c -o libpll_sse3_pthreads_la-treeIO.lo `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-treeIO.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-treeIO.Plo
#	source='treeIO.c' object='libpll_sse3_pthreads_la-treeIO.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-treeIO.lo `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c

libpll_sse3_pthreads_la-models.lo: models.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-models.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-models.Tpo -c -o libpll_sse3_pthreads_la-models.lo `test -f 'models.c' || echo '$(srcdir)/'`models.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-models.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-models.Plo
#	source='models.c' object='libpll_sse3_pthreads_la-models.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-models.lo `test -f 'models.c' || echo '$(srcdir)/'`models.c

libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.lo: evaluatePartialGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.Tpo -c -o libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.lo `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.Plo
#	source='evaluatePartialGenericSpecial.c' object='libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-evaluatePartialGenericSpecial.lo `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c

libpll_sse3_pthreads_la-evaluateGenericSpecial.lo: evaluateGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-evaluateGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-evaluateGenericSpecial.Tpo -c -o libpll_sse3_pthreads_la-evaluateGenericSpecial.lo `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-evaluateGenericSpecial.Plo
#	source='evaluateGenericSpecial.c' object='libpll_sse3_pthreads_la-evaluateGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-evaluateGenericSpecial.lo `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c

libpll_sse3_pthreads_la-newviewGenericSpecial.lo: newviewGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-newviewGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-newviewGenericSpecial.Tpo -c -o libpll_sse3_pthreads_la-newviewGenericSpecial.lo `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-newviewGenericSpecial.Plo
#	source='newviewGenericSpecial.c' object='libpll_sse3_pthreads_la-newviewGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-newviewGenericSpecial.lo `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c

libpll_sse3_pthreads_la-makenewzGenericSpecial.lo: makenewzGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-makenewzGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-makenewzGenericSpecial.Tpo -c -o libpll_sse3_pthreads_la-makenewzGenericSpecial.lo `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-makenewzGenericSpecial.Plo
#	source='makenewzGenericSpecial.c' object='libpll_sse3_pthreads_la-makenewzGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-makenewzGenericSpecial.lo `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c

libpll_sse3_pthreads_la-bipartitionList.lo: bipartitionList.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-bipartitionList.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-bipartitionList.Tpo -c -o libpll_sse3_pthreads_la-bipartitionList.lo `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-bipartitionList.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-bipartitionList.Plo
#	source='bipartitionList.c' object='libpll_sse3_pthreads_la-bipartitionList.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-bipartitionList.lo `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c

libpll_sse3_pthreads_la-restartHashTable.lo: restartHashTable.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-restartHashTable.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-restartHashTable.Tpo -c -o libpll_sse3_pthreads_la-restartHashTable.lo `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-restartHashTable.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-restartHashTable.Plo
#	source='restartHashTable.c' object='libpll_sse3_pthreads_la-restartHashTable.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-restartHashTable.lo `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c

libpll_sse3_pthreads_la-recom.lo: recom.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-recom.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-recom.Tpo -c -o libpll_sse3_pthreads_la-recom.lo `test -f 'recom.c' || echo '$(srcdir)/'`recom.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-recom.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-recom.Plo
#	source='recom.c' object='libpll_sse3_pthreads_la-recom.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-recom.lo `test -f 'recom.c' || echo '$(srcdir)/'`recom.c

libpll_sse3_pthreads_la-lexer.lo: lexer.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-lexer.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-lexer.Tpo -c -o libpll_sse3_pthreads_la-lexer.lo `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-lexer.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-lexer.Plo
#	source='lexer.c' object='libpll_sse3_pthreads_la-lexer.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-lexer.lo `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c

libpll_sse3_pthreads_la-alignment.lo: alignment.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-alignment.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-alignment.Tpo -c -o libpll_sse3_pthreads_la-alignment.lo `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-alignment.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-alignment.Plo
#	source='alignment.c' object='libpll_sse3_pthreads_la-alignment.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-alignment.lo `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c

libpll_sse3_pthreads_la-newick.lo: newick.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-newick.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-newick.Tpo -c -o libpll_sse3_pthreads_la-newick.lo `test -f 'newick.c' || echo '$(srcdir)/'`newick.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-newick.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-newick.Plo
#	source='newick.c' object='libpll_sse3_pthreads_la-newick.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-newick.lo `test -f 'newick.c' || echo '$(srcdir)/'`newick.c

libpll_sse3_pthreads_la-parsePartition.lo: parsePartition.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-parsePartition.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-parsePartition.Tpo -c -o libpll_sse3_pthreads_la-parsePartition.lo `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-parsePartition.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-parsePartition.Plo
#	source='parsePartition.c' object='libpll_sse3_pthreads_la-parsePartition.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-parsePartition.lo `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c

libpll_sse3_pthreads_la-parsimony.lo: parsimony.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_pthreads_la-parsimony.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_pthreads_la-parsimony.Tpo -c -o libpll_sse3_pthreads_la-parsimony.lo `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c
	$(am__mv) $(DEPDIR)/libpll_sse3_pthreads_la-parsimony.Tpo $(DEPDIR)/libpll_sse3_pthreads_la-parsimony.Plo
#	source='parsimony.c' object='libpll_sse3_pthreads_la-parsimony.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_pthreads_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_pthreads_la-parsimony.lo `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c

libpll_sse3_la-hash.lo: hash.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-hash.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-hash.Tpo -c -o libpll_sse3_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-hash.Tpo $(DEPDIR)/libpll_sse3_la-hash.Plo
#	source='hash.c' object='libpll_sse3_la-hash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-hash.lo `test -f 'hash.c' || echo '$(srcdir)/'`hash.c

libpll_sse3_la-stack.lo: stack.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-stack.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-stack.Tpo -c -o libpll_sse3_la-stack.lo `test -f 'stack.c' || echo '$(srcdir)/'`stack.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-stack.Tpo $(DEPDIR)/libpll_sse3_la-stack.Plo
#	source='stack.c' object='libpll_sse3_la-stack.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-stack.lo `test -f 'stack.c' || echo '$(srcdir)/'`stack.c

libpll_sse3_la-ssort.lo: ssort.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-ssort.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-ssort.Tpo -c -o libpll_sse3_la-ssort.lo `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-ssort.Tpo $(DEPDIR)/libpll_sse3_la-ssort.Plo
#	source='ssort.c' object='libpll_sse3_la-ssort.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-ssort.lo `test -f 'ssort.c' || echo '$(srcdir)/'`ssort.c

libpll_sse3_la-queue.lo: queue.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-queue.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-queue.Tpo -c -o libpll_sse3_la-queue.lo `test -f 'queue.c' || echo '$(srcdir)/'`queue.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-queue.Tpo $(DEPDIR)/libpll_sse3_la-queue.Plo
#	source='queue.c' object='libpll_sse3_la-queue.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-queue.lo `test -f 'queue.c' || echo '$(srcdir)/'`queue.c

libpll_sse3_la-utils.lo: utils.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-utils.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-utils.Tpo -c -o libpll_sse3_la-utils.lo `test -f 'utils.c' || echo '$(srcdir)/'`utils.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-utils.Tpo $(DEPDIR)/libpll_sse3_la-utils.Plo
#	source='utils.c' object='libpll_sse3_la-utils.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-utils.lo `test -f 'utils.c' || echo '$(srcdir)/'`utils.c

libpll_sse3_la-randomTree.lo: randomTree.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-randomTree.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-randomTree.Tpo -c -o libpll_sse3_la-randomTree.lo `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-randomTree.Tpo $(DEPDIR)/libpll_sse3_la-randomTree.Plo
#	source='randomTree.c' object='libpll_sse3_la-randomTree.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-randomTree.lo `test -f 'randomTree.c' || echo '$(srcdir)/'`randomTree.c

libpll_sse3_la-optimizeModel.lo: optimizeModel.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-optimizeModel.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-optimizeModel.Tpo -c -o libpll_sse3_la-optimizeModel.lo `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-optimizeModel.Tpo $(DEPDIR)/libpll_sse3_la-optimizeModel.Plo
#	source='optimizeModel.c' object='libpll_sse3_la-optimizeModel.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-optimizeModel.lo `test -f 'optimizeModel.c' || echo '$(srcdir)/'`optimizeModel.c

libpll_sse3_la-trash.lo: trash.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-trash.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-trash.Tpo -c -o libpll_sse3_la-trash.lo `test -f 'trash.c' || echo '$(srcdir)/'`trash.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-trash.Tpo $(DEPDIR)/libpll_sse3_la-trash.Plo
#	source='trash.c' object='libpll_sse3_la-trash.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-trash.lo `test -f 'trash.c' || echo '$(srcdir)/'`trash.c

libpll_sse3_la-searchAlgo.lo: searchAlgo.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-searchAlgo.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-searchAlgo.Tpo -c -o libpll_sse3_la-searchAlgo.lo `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-searchAlgo.Tpo $(DEPDIR)/libpll_sse3_la-searchAlgo.Plo
#	source='searchAlgo.c' object='libpll_sse3_la-searchAlgo.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-searchAlgo.lo `test -f 'searchAlgo.c' || echo '$(srcdir)/'`searchAlgo.c

libpll_sse3_la-topologies.lo: topologies.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-topologies.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-topologies.Tpo -c -o libpll_sse3_la-topologies.lo `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-topologies.Tpo $(DEPDIR)/libpll_sse3_la-topologies.Plo
#	source='topologies.c' object='libpll_sse3_la-topologies.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-topologies.lo `test -f 'topologies.c' || echo '$(srcdir)/'`topologies.c

libpll_sse3_la-fastDNAparsimony.lo: fastDNAparsimony.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-fastDNAparsimony.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-fastDNAparsimony.Tpo -c -o libpll_sse3_la-fastDNAparsimony.lo `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-fastDNAparsimony.Tpo $(DEPDIR)/libpll_sse3_la-fastDNAparsimony.Plo
#	source='fastDNAparsimony.c' object='libpll_sse3_la-fastDNAparsimony.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-fastDNAparsimony.lo `test -f 'fastDNAparsimony.c' || echo '$(srcdir)/'`fastDNAparsimony.c

libpll_sse3_la-treeIO.lo: treeIO.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-treeIO.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-treeIO.Tpo -c -o libpll_sse3_la-treeIO.lo `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-treeIO.Tpo $(DEPDIR)/libpll_sse3_la-treeIO.Plo
#	source='treeIO.c' object='libpll_sse3_la-treeIO.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-treeIO.lo `test -f 'treeIO.c' || echo '$(srcdir)/'`treeIO.c

libpll_sse3_la-models.lo: models.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-models.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-models.Tpo -c -o libpll_sse3_la-models.lo `test -f 'models.c' || echo '$(srcdir)/'`models.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-models.Tpo $(DEPDIR)/libpll_sse3_la-models.Plo
#	source='models.c' object='libpll_sse3_la-models.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-models.lo `test -f 'models.c' || echo '$(srcdir)/'`models.c

libpll_sse3_la-evaluatePartialGenericSpecial.lo: evaluatePartialGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-evaluatePartialGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-evaluatePartialGenericSpecial.Tpo -c -o libpll_sse3_la-evaluatePartialGenericSpecial.lo `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-evaluatePartialGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_la-evaluatePartialGenericSpecial.Plo
#	source='evaluatePartialGenericSpecial.c' object='libpll_sse3_la-evaluatePartialGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-evaluatePartialGenericSpecial.lo `test -f 'evaluatePartialGenericSpecial.c' || echo '$(srcdir)/'`evaluatePartialGenericSpecial.c

libpll_sse3_la-evaluateGenericSpecial.lo: evaluateGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-evaluateGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-evaluateGenericSpecial.Tpo -c -o libpll_sse3_la-evaluateGenericSpecial.lo `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-evaluateGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_la-evaluateGenericSpecial.Plo
#	source='evaluateGenericSpecial.c' object='libpll_sse3_la-evaluateGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-evaluateGenericSpecial.lo `test -f 'evaluateGenericSpecial.c' || echo '$(srcdir)/'`evaluateGenericSpecial.c

libpll_sse3_la-newviewGenericSpecial.lo: newviewGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-newviewGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-newviewGenericSpecial.Tpo -c -o libpll_sse3_la-newviewGenericSpecial.lo `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-newviewGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_la-newviewGenericSpecial.Plo
#	source='newviewGenericSpecial.c' object='libpll_sse3_la-newviewGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-newviewGenericSpecial.lo `test -f 'newviewGenericSpecial.c' || echo '$(srcdir)/'`newviewGenericSpecial.c

libpll_sse3_la-makenewzGenericSpecial.lo: makenewzGenericSpecial.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-makenewzGenericSpecial.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-makenewzGenericSpecial.Tpo -c -o libpll_sse3_la-makenewzGenericSpecial.lo `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-makenewzGenericSpecial.Tpo $(DEPDIR)/libpll_sse3_la-makenewzGenericSpecial.Plo
#	source='makenewzGenericSpecial.c' object='libpll_sse3_la-makenewzGenericSpecial.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-makenewzGenericSpecial.lo `test -f 'makenewzGenericSpecial.c' || echo '$(srcdir)/'`makenewzGenericSpecial.c

libpll_sse3_la-bipartitionList.lo: bipartitionList.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-bipartitionList.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-bipartitionList.Tpo -c -o libpll_sse3_la-bipartitionList.lo `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-bipartitionList.Tpo $(DEPDIR)/libpll_sse3_la-bipartitionList.Plo
#	source='bipartitionList.c' object='libpll_sse3_la-bipartitionList.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-bipartitionList.lo `test -f 'bipartitionList.c' || echo '$(srcdir)/'`bipartitionList.c

libpll_sse3_la-restartHashTable.lo: restartHashTable.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-restartHashTable.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-restartHashTable.Tpo -c -o libpll_sse3_la-restartHashTable.lo `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-restartHashTable.Tpo $(DEPDIR)/libpll_sse3_la-restartHashTable.Plo
#	source='restartHashTable.c' object='libpll_sse3_la-restartHashTable.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-restartHashTable.lo `test -f 'restartHashTable.c' || echo '$(srcdir)/'`restartHashTable.c

libpll_sse3_la-recom.lo: recom.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-recom.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-recom.Tpo -c -o libpll_sse3_la-recom.lo `test -f 'recom.c' || echo '$(srcdir)/'`recom.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-recom.Tpo $(DEPDIR)/libpll_sse3_la-recom.Plo
#	source='recom.c' object='libpll_sse3_la-recom.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-recom.lo `test -f 'recom.c' || echo '$(srcdir)/'`recom.c

libpll_sse3_la-lexer.lo: lexer.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-lexer.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-lexer.Tpo -c -o libpll_sse3_la-lexer.lo `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-lexer.Tpo $(DEPDIR)/libpll_sse3_la-lexer.Plo
#	source='lexer.c' object='libpll_sse3_la-lexer.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-lexer.lo `test -f 'lexer.c' || echo '$(srcdir)/'`lexer.c

libpll_sse3_la-alignment.lo: alignment.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-alignment.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-alignment.Tpo -c -o libpll_sse3_la-alignment.lo `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-alignment.Tpo $(DEPDIR)/libpll_sse3_la-alignment.Plo
#	source='alignment.c' object='libpll_sse3_la-alignment.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-alignment.lo `test -f 'alignment.c' || echo '$(srcdir)/'`alignment.c

libpll_sse3_la-newick.lo: newick.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-newick.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-newick.Tpo -c -o libpll_sse3_la-newick.lo `test -f 'newick.c' || echo '$(srcdir)/'`newick.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-newick.Tpo $(DEPDIR)/libpll_sse3_la-newick.Plo
#	source='newick.c' object='libpll_sse3_la-newick.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-newick.lo `test -f 'newick.c' || echo '$(srcdir)/'`newick.c

libpll_sse3_la-parsePartition.lo: parsePartition.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-parsePartition.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-parsePartition.Tpo -c -o libpll_sse3_la-parsePartition.lo `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-parsePartition.Tpo $(DEPDIR)/libpll_sse3_la-parsePartition.Plo
#	source='parsePartition.c' object='libpll_sse3_la-parsePartition.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-parsePartition.lo `test -f 'parsePartition.c' || echo '$(srcdir)/'`parsePartition.c

libpll_sse3_la-parsimony.lo: parsimony.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -MT libpll_sse3_la-parsimony.lo -MD -MP -MF $(DEPDIR)/libpll_sse3_la-parsimony.Tpo -c -o libpll_sse3_la-parsimony.lo `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c
	$(am__mv) $(DEPDIR)/libpll_sse3_la-parsimony.Tpo $(DEPDIR)/libpll_sse3_la-parsimony.Plo
#	source='parsimony.c' object='libpll_sse3_la-parsimony.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libpll_sse3_la_CFLAGS) $(CFLAGS) -c -o libpll_sse3_la-parsimony.lo `test -f 'parsimony.c' || echo '$(srcdir)/'`parsimony.c

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(pkgincludedir)" || $(MKDIR_P) "$(DESTDIR)$(pkgincludedir)"
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(pkgincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(pkgincludedir)" || exit $$?; \
	done

uninstall-pkgincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(pkginclude_HEADERS)'; test -n "$(pkgincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(pkgincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(pkgincludedir)" && rm -f $$files

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(libdir)" "$(DESTDIR)$(pkgincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libLIBRARIES clean-libLTLIBRARIES \
	clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-pkgincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLIBRARIES install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLIBRARIES uninstall-libLTLIBRARIES \
	uninstall-pkgincludeHEADERS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLIBRARIES clean-libLTLIBRARIES clean-libtool ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-libLIBRARIES install-libLTLIBRARIES \
	install-man install-pdf install-pdf-am \
	install-pkgincludeHEADERS install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-libLIBRARIES uninstall-libLTLIBRARIES \
	uninstall-pkgincludeHEADERS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
